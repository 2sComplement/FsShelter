/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Prolucid.ThriftShell.Messages
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Handshake : TBase
  {

    public string PidDir { get; set; }

    public Context Context { get; set; }

    public Dictionary<string, Variant> Config { get; set; }

    public Handshake() {
    }

    public Handshake(string pidDir, Context context, Dictionary<string, Variant> config) : this() {
      this.PidDir = pidDir;
      this.Context = context;
      this.Config = config;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_pidDir = false;
      bool isset_context = false;
      bool isset_config = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              PidDir = iprot.ReadString();
              isset_pidDir = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Context = new Context();
              Context.Read(iprot);
              isset_context = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                Config = new Dictionary<string, Variant>();
                TMap _map5 = iprot.ReadMapBegin();
                for( int _i6 = 0; _i6 < _map5.Count; ++_i6)
                {
                  string _key7;
                  Variant _val8;
                  _key7 = iprot.ReadString();
                  _val8 = new Variant();
                  _val8.Read(iprot);
                  Config[_key7] = _val8;
                }
                iprot.ReadMapEnd();
              }
              isset_config = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_pidDir)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_context)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_config)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Handshake");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "pidDir";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(PidDir);
      oprot.WriteFieldEnd();
      field.Name = "context";
      field.Type = TType.Struct;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      Context.Write(oprot);
      oprot.WriteFieldEnd();
      field.Name = "config";
      field.Type = TType.Map;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Config.Count));
        foreach (string _iter9 in Config.Keys)
        {
          oprot.WriteString(_iter9);
          Config[_iter9].Write(oprot);
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Handshake(");
      sb.Append("PidDir: ");
      sb.Append(PidDir);
      sb.Append(",Context: ");
      sb.Append(Context== null ? "<null>" : Context.ToString());
      sb.Append(",Config: ");
      sb.Append(Config);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
