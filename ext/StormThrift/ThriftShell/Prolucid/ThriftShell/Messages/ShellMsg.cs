/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Prolucid.ThriftShell.Messages
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ShellMsg : TBase
  {
    private OkReply _ok;
    private FailReply _fail;
    private EmitCommand _emit;
    private PidReply _pid;
    private LogCommand _log;
    private SyncReply _sync;
    private Metric _metric;

    public OkReply Ok
    {
      get
      {
        return _ok;
      }
      set
      {
        __isset.ok = true;
        this._ok = value;
      }
    }

    public FailReply Fail
    {
      get
      {
        return _fail;
      }
      set
      {
        __isset.fail = true;
        this._fail = value;
      }
    }

    public EmitCommand Emit
    {
      get
      {
        return _emit;
      }
      set
      {
        __isset.emit = true;
        this._emit = value;
      }
    }

    public PidReply Pid
    {
      get
      {
        return _pid;
      }
      set
      {
        __isset.pid = true;
        this._pid = value;
      }
    }

    public LogCommand Log
    {
      get
      {
        return _log;
      }
      set
      {
        __isset.log = true;
        this._log = value;
      }
    }

    public SyncReply Sync
    {
      get
      {
        return _sync;
      }
      set
      {
        __isset.sync = true;
        this._sync = value;
      }
    }

    public Metric Metric
    {
      get
      {
        return _metric;
      }
      set
      {
        __isset.metric = true;
        this._metric = value;
      }
    }

    public bool _term { get; set; }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ok;
      public bool fail;
      public bool emit;
      public bool pid;
      public bool log;
      public bool sync;
      public bool metric;
    }

    public ShellMsg() {
    }

    public ShellMsg(bool _term) : this() {
      this._term = _term;
    }

    public void Read (TProtocol iprot)
    {
      bool isset__term = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Ok = new OkReply();
              Ok.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Fail = new FailReply();
              Fail.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Emit = new EmitCommand();
              Emit.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              Pid = new PidReply();
              Pid.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              Log = new LogCommand();
              Log.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              Sync = new SyncReply();
              Sync.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Struct) {
              Metric = new Metric();
              Metric.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 100:
            if (field.Type == TType.Bool) {
              _term = iprot.ReadBool();
              isset__term = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset__term)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ShellMsg");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Ok != null && __isset.ok) {
        field.Name = "ok";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Ok.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Fail != null && __isset.fail) {
        field.Name = "fail";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Fail.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Emit != null && __isset.emit) {
        field.Name = "emit";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Emit.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Pid != null && __isset.pid) {
        field.Name = "pid";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        Pid.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Log != null && __isset.log) {
        field.Name = "log";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        Log.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Sync != null && __isset.sync) {
        field.Name = "sync";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        Sync.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Metric != null && __isset.metric) {
        field.Name = "metric";
        field.Type = TType.Struct;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        Metric.Write(oprot);
        oprot.WriteFieldEnd();
      }
      field.Name = "_term";
      field.Type = TType.Bool;
      field.ID = 100;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(_term);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ShellMsg(");
      sb.Append("Ok: ");
      sb.Append(Ok== null ? "<null>" : Ok.ToString());
      sb.Append(",Fail: ");
      sb.Append(Fail== null ? "<null>" : Fail.ToString());
      sb.Append(",Emit: ");
      sb.Append(Emit== null ? "<null>" : Emit.ToString());
      sb.Append(",Pid: ");
      sb.Append(Pid== null ? "<null>" : Pid.ToString());
      sb.Append(",Log: ");
      sb.Append(Log== null ? "<null>" : Log.ToString());
      sb.Append(",Sync: ");
      sb.Append(Sync== null ? "<null>" : Sync.ToString());
      sb.Append(",Metric: ");
      sb.Append(Metric== null ? "<null>" : Metric.ToString());
      sb.Append(",_term: ");
      sb.Append(_term);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
