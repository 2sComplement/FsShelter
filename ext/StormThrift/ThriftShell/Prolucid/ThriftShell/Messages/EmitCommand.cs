/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Prolucid.ThriftShell.Messages
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class EmitCommand : TBase
  {
    private string _id;
    private List<string> _anchors;
    private int _task;
    private bool _needTaskIds;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Stream { get; set; }

    public List<Variant> Tuple { get; set; }

    public List<string> Anchors
    {
      get
      {
        return _anchors;
      }
      set
      {
        __isset.anchors = true;
        this._anchors = value;
      }
    }

    public int Task
    {
      get
      {
        return _task;
      }
      set
      {
        __isset.task = true;
        this._task = value;
      }
    }

    public bool NeedTaskIds
    {
      get
      {
        return _needTaskIds;
      }
      set
      {
        __isset.needTaskIds = true;
        this._needTaskIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool anchors;
      public bool task;
      public bool needTaskIds;
    }

    public EmitCommand() {
    }

    public EmitCommand(string stream, List<Variant> tuple) : this() {
      this.Stream = stream;
      this.Tuple = tuple;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_stream = false;
      bool isset_tuple = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Stream = iprot.ReadString();
              isset_stream = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Tuple = new List<Variant>();
                TList _list18 = iprot.ReadListBegin();
                for( int _i19 = 0; _i19 < _list18.Count; ++_i19)
                {
                  Variant _elem20 = new Variant();
                  _elem20 = new Variant();
                  _elem20.Read(iprot);
                  Tuple.Add(_elem20);
                }
                iprot.ReadListEnd();
              }
              isset_tuple = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                Anchors = new List<string>();
                TList _list21 = iprot.ReadListBegin();
                for( int _i22 = 0; _i22 < _list21.Count; ++_i22)
                {
                  string _elem23 = null;
                  _elem23 = iprot.ReadString();
                  Anchors.Add(_elem23);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Task = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              NeedTaskIds = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_stream)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_tuple)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("EmitCommand");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      field.Name = "stream";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Stream);
      oprot.WriteFieldEnd();
      field.Name = "tuple";
      field.Type = TType.List;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, Tuple.Count));
        foreach (Variant _iter24 in Tuple)
        {
          _iter24.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (Anchors != null && __isset.anchors) {
        field.Name = "anchors";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Anchors.Count));
          foreach (string _iter25 in Anchors)
          {
            oprot.WriteString(_iter25);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.task) {
        field.Name = "task";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Task);
        oprot.WriteFieldEnd();
      }
      if (__isset.needTaskIds) {
        field.Name = "needTaskIds";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(NeedTaskIds);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("EmitCommand(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",Stream: ");
      sb.Append(Stream);
      sb.Append(",Tuple: ");
      sb.Append(Tuple);
      sb.Append(",Anchors: ");
      sb.Append(Anchors);
      sb.Append(",Task: ");
      sb.Append(Task);
      sb.Append(",NeedTaskIds: ");
      sb.Append(NeedTaskIds);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
