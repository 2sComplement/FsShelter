/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Prolucid.ThriftShell.Messages
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Variant : TBase
  {
    private string _strVal;
    private int _int32Val;
    private long _int64Val;
    private short _int16Val;
    private double _doubleVal;
    private sbyte _byteVal;
    private bool _boolVal;
    private string _iso8601Val;
    private byte[] _bytesVal;
    private NoneStruct _none;

    public string StrVal
    {
      get
      {
        return _strVal;
      }
      set
      {
        __isset.strVal = true;
        this._strVal = value;
      }
    }

    public int Int32Val
    {
      get
      {
        return _int32Val;
      }
      set
      {
        __isset.int32Val = true;
        this._int32Val = value;
      }
    }

    public long Int64Val
    {
      get
      {
        return _int64Val;
      }
      set
      {
        __isset.int64Val = true;
        this._int64Val = value;
      }
    }

    public short Int16Val
    {
      get
      {
        return _int16Val;
      }
      set
      {
        __isset.int16Val = true;
        this._int16Val = value;
      }
    }

    public double DoubleVal
    {
      get
      {
        return _doubleVal;
      }
      set
      {
        __isset.doubleVal = true;
        this._doubleVal = value;
      }
    }

    public sbyte ByteVal
    {
      get
      {
        return _byteVal;
      }
      set
      {
        __isset.byteVal = true;
        this._byteVal = value;
      }
    }

    public bool BoolVal
    {
      get
      {
        return _boolVal;
      }
      set
      {
        __isset.boolVal = true;
        this._boolVal = value;
      }
    }

    public string Iso8601Val
    {
      get
      {
        return _iso8601Val;
      }
      set
      {
        __isset.iso8601Val = true;
        this._iso8601Val = value;
      }
    }

    public byte[] BytesVal
    {
      get
      {
        return _bytesVal;
      }
      set
      {
        __isset.bytesVal = true;
        this._bytesVal = value;
      }
    }

    public NoneStruct None
    {
      get
      {
        return _none;
      }
      set
      {
        __isset.none = true;
        this._none = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool strVal;
      public bool int32Val;
      public bool int64Val;
      public bool int16Val;
      public bool doubleVal;
      public bool byteVal;
      public bool boolVal;
      public bool iso8601Val;
      public bool bytesVal;
      public bool none;
    }

    public Variant() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              StrVal = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Int32Val = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              Int64Val = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I16) {
              Int16Val = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              DoubleVal = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Byte) {
              ByteVal = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              BoolVal = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Iso8601Val = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              BytesVal = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Struct) {
              None = new NoneStruct();
              None.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Variant");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (StrVal != null && __isset.strVal) {
        field.Name = "strVal";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StrVal);
        oprot.WriteFieldEnd();
      }
      if (__isset.int32Val) {
        field.Name = "int32Val";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Int32Val);
        oprot.WriteFieldEnd();
      }
      if (__isset.int64Val) {
        field.Name = "int64Val";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Int64Val);
        oprot.WriteFieldEnd();
      }
      if (__isset.int16Val) {
        field.Name = "int16Val";
        field.Type = TType.I16;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Int16Val);
        oprot.WriteFieldEnd();
      }
      if (__isset.doubleVal) {
        field.Name = "doubleVal";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(DoubleVal);
        oprot.WriteFieldEnd();
      }
      if (__isset.byteVal) {
        field.Name = "byteVal";
        field.Type = TType.Byte;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ByteVal);
        oprot.WriteFieldEnd();
      }
      if (__isset.boolVal) {
        field.Name = "boolVal";
        field.Type = TType.Bool;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(BoolVal);
        oprot.WriteFieldEnd();
      }
      if (Iso8601Val != null && __isset.iso8601Val) {
        field.Name = "iso8601Val";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Iso8601Val);
        oprot.WriteFieldEnd();
      }
      if (BytesVal != null && __isset.bytesVal) {
        field.Name = "bytesVal";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(BytesVal);
        oprot.WriteFieldEnd();
      }
      if (None != null && __isset.none) {
        field.Name = "none";
        field.Type = TType.Struct;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        None.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Variant(");
      sb.Append("StrVal: ");
      sb.Append(StrVal);
      sb.Append(",Int32Val: ");
      sb.Append(Int32Val);
      sb.Append(",Int64Val: ");
      sb.Append(Int64Val);
      sb.Append(",Int16Val: ");
      sb.Append(Int16Val);
      sb.Append(",DoubleVal: ");
      sb.Append(DoubleVal);
      sb.Append(",ByteVal: ");
      sb.Append(ByteVal);
      sb.Append(",BoolVal: ");
      sb.Append(BoolVal);
      sb.Append(",Iso8601Val: ");
      sb.Append(Iso8601Val);
      sb.Append(",BytesVal: ");
      sb.Append(BytesVal);
      sb.Append(",None: ");
      sb.Append(None== null ? "<null>" : None.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
