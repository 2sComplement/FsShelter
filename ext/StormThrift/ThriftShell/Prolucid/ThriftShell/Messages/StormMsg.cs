/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Prolucid.ThriftShell.Messages
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class StormMsg : TBase
  {
    private Handshake _handshake;
    private NextCommand _nextCmd;
    private AckCommand _ackCmd;
    private NackCommand _nackCmd;
    private StreamIn _streamIn;
    private TaskIdsReply _taskIds;
    private Heartbeat _hearbeat;

    public Handshake Handshake
    {
      get
      {
        return _handshake;
      }
      set
      {
        __isset.handshake = true;
        this._handshake = value;
      }
    }

    public NextCommand NextCmd
    {
      get
      {
        return _nextCmd;
      }
      set
      {
        __isset.nextCmd = true;
        this._nextCmd = value;
      }
    }

    public AckCommand AckCmd
    {
      get
      {
        return _ackCmd;
      }
      set
      {
        __isset.ackCmd = true;
        this._ackCmd = value;
      }
    }

    public NackCommand NackCmd
    {
      get
      {
        return _nackCmd;
      }
      set
      {
        __isset.nackCmd = true;
        this._nackCmd = value;
      }
    }

    public StreamIn StreamIn
    {
      get
      {
        return _streamIn;
      }
      set
      {
        __isset.streamIn = true;
        this._streamIn = value;
      }
    }

    public TaskIdsReply TaskIds
    {
      get
      {
        return _taskIds;
      }
      set
      {
        __isset.taskIds = true;
        this._taskIds = value;
      }
    }

    public Heartbeat Hearbeat
    {
      get
      {
        return _hearbeat;
      }
      set
      {
        __isset.hearbeat = true;
        this._hearbeat = value;
      }
    }

    public bool _term { get; set; }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool handshake;
      public bool nextCmd;
      public bool ackCmd;
      public bool nackCmd;
      public bool streamIn;
      public bool taskIds;
      public bool hearbeat;
    }

    public StormMsg() {
    }

    public StormMsg(bool _term) : this() {
      this._term = _term;
    }

    public void Read (TProtocol iprot)
    {
      bool isset__term = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Handshake = new Handshake();
              Handshake.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              NextCmd = new NextCommand();
              NextCmd.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              AckCmd = new AckCommand();
              AckCmd.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              NackCmd = new NackCommand();
              NackCmd.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              StreamIn = new StreamIn();
              StreamIn.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              TaskIds = new TaskIdsReply();
              TaskIds.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Struct) {
              Hearbeat = new Heartbeat();
              Hearbeat.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 100:
            if (field.Type == TType.Bool) {
              _term = iprot.ReadBool();
              isset__term = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset__term)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("StormMsg");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Handshake != null && __isset.handshake) {
        field.Name = "handshake";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Handshake.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (NextCmd != null && __isset.nextCmd) {
        field.Name = "nextCmd";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        NextCmd.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (AckCmd != null && __isset.ackCmd) {
        field.Name = "ackCmd";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        AckCmd.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (NackCmd != null && __isset.nackCmd) {
        field.Name = "nackCmd";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        NackCmd.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (StreamIn != null && __isset.streamIn) {
        field.Name = "streamIn";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        StreamIn.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (TaskIds != null && __isset.taskIds) {
        field.Name = "taskIds";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        TaskIds.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Hearbeat != null && __isset.hearbeat) {
        field.Name = "hearbeat";
        field.Type = TType.Struct;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        Hearbeat.Write(oprot);
        oprot.WriteFieldEnd();
      }
      field.Name = "_term";
      field.Type = TType.Bool;
      field.ID = 100;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(_term);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("StormMsg(");
      sb.Append("Handshake: ");
      sb.Append(Handshake== null ? "<null>" : Handshake.ToString());
      sb.Append(",NextCmd: ");
      sb.Append(NextCmd== null ? "<null>" : NextCmd.ToString());
      sb.Append(",AckCmd: ");
      sb.Append(AckCmd== null ? "<null>" : AckCmd.ToString());
      sb.Append(",NackCmd: ");
      sb.Append(NackCmd== null ? "<null>" : NackCmd.ToString());
      sb.Append(",StreamIn: ");
      sb.Append(StreamIn== null ? "<null>" : StreamIn.ToString());
      sb.Append(",TaskIds: ");
      sb.Append(TaskIds== null ? "<null>" : TaskIds.ToString());
      sb.Append(",Hearbeat: ");
      sb.Append(Hearbeat== null ? "<null>" : Hearbeat.ToString());
      sb.Append(",_term: ");
      sb.Append(_term);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
