/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StormThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TopologyStats : TBase
  {
    private Dictionary<string, long> _window_to_emitted;
    private Dictionary<string, long> _window_to_transferred;
    private Dictionary<string, double> _window_to_complete_latencies_ms;
    private Dictionary<string, long> _window_to_acked;
    private Dictionary<string, long> _window_to_failed;

    public Dictionary<string, long> Window_to_emitted
    {
      get
      {
        return _window_to_emitted;
      }
      set
      {
        __isset.window_to_emitted = true;
        this._window_to_emitted = value;
      }
    }

    public Dictionary<string, long> Window_to_transferred
    {
      get
      {
        return _window_to_transferred;
      }
      set
      {
        __isset.window_to_transferred = true;
        this._window_to_transferred = value;
      }
    }

    public Dictionary<string, double> Window_to_complete_latencies_ms
    {
      get
      {
        return _window_to_complete_latencies_ms;
      }
      set
      {
        __isset.window_to_complete_latencies_ms = true;
        this._window_to_complete_latencies_ms = value;
      }
    }

    public Dictionary<string, long> Window_to_acked
    {
      get
      {
        return _window_to_acked;
      }
      set
      {
        __isset.window_to_acked = true;
        this._window_to_acked = value;
      }
    }

    public Dictionary<string, long> Window_to_failed
    {
      get
      {
        return _window_to_failed;
      }
      set
      {
        __isset.window_to_failed = true;
        this._window_to_failed = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool window_to_emitted;
      public bool window_to_transferred;
      public bool window_to_complete_latencies_ms;
      public bool window_to_acked;
      public bool window_to_failed;
    }

    public TopologyStats() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                Window_to_emitted = new Dictionary<string, long>();
                TMap _map176 = iprot.ReadMapBegin();
                for( int _i177 = 0; _i177 < _map176.Count; ++_i177)
                {
                  string _key178;
                  long _val179;
                  _key178 = iprot.ReadString();
                  _val179 = iprot.ReadI64();
                  Window_to_emitted[_key178] = _val179;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                Window_to_transferred = new Dictionary<string, long>();
                TMap _map180 = iprot.ReadMapBegin();
                for( int _i181 = 0; _i181 < _map180.Count; ++_i181)
                {
                  string _key182;
                  long _val183;
                  _key182 = iprot.ReadString();
                  _val183 = iprot.ReadI64();
                  Window_to_transferred[_key182] = _val183;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                Window_to_complete_latencies_ms = new Dictionary<string, double>();
                TMap _map184 = iprot.ReadMapBegin();
                for( int _i185 = 0; _i185 < _map184.Count; ++_i185)
                {
                  string _key186;
                  double _val187;
                  _key186 = iprot.ReadString();
                  _val187 = iprot.ReadDouble();
                  Window_to_complete_latencies_ms[_key186] = _val187;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                Window_to_acked = new Dictionary<string, long>();
                TMap _map188 = iprot.ReadMapBegin();
                for( int _i189 = 0; _i189 < _map188.Count; ++_i189)
                {
                  string _key190;
                  long _val191;
                  _key190 = iprot.ReadString();
                  _val191 = iprot.ReadI64();
                  Window_to_acked[_key190] = _val191;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Map) {
              {
                Window_to_failed = new Dictionary<string, long>();
                TMap _map192 = iprot.ReadMapBegin();
                for( int _i193 = 0; _i193 < _map192.Count; ++_i193)
                {
                  string _key194;
                  long _val195;
                  _key194 = iprot.ReadString();
                  _val195 = iprot.ReadI64();
                  Window_to_failed[_key194] = _val195;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TopologyStats");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Window_to_emitted != null && __isset.window_to_emitted) {
        field.Name = "window_to_emitted";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Window_to_emitted.Count));
          foreach (string _iter196 in Window_to_emitted.Keys)
          {
            oprot.WriteString(_iter196);
            oprot.WriteI64(Window_to_emitted[_iter196]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Window_to_transferred != null && __isset.window_to_transferred) {
        field.Name = "window_to_transferred";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Window_to_transferred.Count));
          foreach (string _iter197 in Window_to_transferred.Keys)
          {
            oprot.WriteString(_iter197);
            oprot.WriteI64(Window_to_transferred[_iter197]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Window_to_complete_latencies_ms != null && __isset.window_to_complete_latencies_ms) {
        field.Name = "window_to_complete_latencies_ms";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Double, Window_to_complete_latencies_ms.Count));
          foreach (string _iter198 in Window_to_complete_latencies_ms.Keys)
          {
            oprot.WriteString(_iter198);
            oprot.WriteDouble(Window_to_complete_latencies_ms[_iter198]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Window_to_acked != null && __isset.window_to_acked) {
        field.Name = "window_to_acked";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Window_to_acked.Count));
          foreach (string _iter199 in Window_to_acked.Keys)
          {
            oprot.WriteString(_iter199);
            oprot.WriteI64(Window_to_acked[_iter199]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Window_to_failed != null && __isset.window_to_failed) {
        field.Name = "window_to_failed";
        field.Type = TType.Map;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Window_to_failed.Count));
          foreach (string _iter200 in Window_to_failed.Keys)
          {
            oprot.WriteString(_iter200);
            oprot.WriteI64(Window_to_failed[_iter200]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TopologyStats(");
      sb.Append("Window_to_emitted: ");
      sb.Append(Window_to_emitted);
      sb.Append(",Window_to_transferred: ");
      sb.Append(Window_to_transferred);
      sb.Append(",Window_to_complete_latencies_ms: ");
      sb.Append(Window_to_complete_latencies_ms);
      sb.Append(",Window_to_acked: ");
      sb.Append(Window_to_acked);
      sb.Append(",Window_to_failed: ");
      sb.Append(Window_to_failed);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
