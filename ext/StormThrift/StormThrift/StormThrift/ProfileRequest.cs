/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StormThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ProfileRequest : TBase
  {
    private long _time_stamp;

    public NodeInfo NodeInfo { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="ProfileAction"/>
    /// </summary>
    public ProfileAction Action { get; set; }

    public long Time_stamp
    {
      get
      {
        return _time_stamp;
      }
      set
      {
        __isset.time_stamp = true;
        this._time_stamp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool time_stamp;
    }

    public ProfileRequest() {
    }

    public ProfileRequest(NodeInfo nodeInfo, ProfileAction action) : this() {
      this.NodeInfo = nodeInfo;
      this.Action = action;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_nodeInfo = false;
      bool isset_action = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              NodeInfo = new NodeInfo();
              NodeInfo.Read(iprot);
              isset_nodeInfo = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Action = (ProfileAction)iprot.ReadI32();
              isset_action = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              Time_stamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_nodeInfo)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_action)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ProfileRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "nodeInfo";
      field.Type = TType.Struct;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      NodeInfo.Write(oprot);
      oprot.WriteFieldEnd();
      field.Name = "action";
      field.Type = TType.I32;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)Action);
      oprot.WriteFieldEnd();
      if (__isset.time_stamp) {
        field.Name = "time_stamp";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Time_stamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ProfileRequest(");
      sb.Append("NodeInfo: ");
      sb.Append(NodeInfo== null ? "<null>" : NodeInfo.ToString());
      sb.Append(",Action: ");
      sb.Append(Action);
      sb.Append(",Time_stamp: ");
      sb.Append(Time_stamp);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
