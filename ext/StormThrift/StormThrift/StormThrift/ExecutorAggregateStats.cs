/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StormThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ExecutorAggregateStats : TBase
  {
    private ExecutorSummary _exec_summary;
    private ComponentAggregateStats _stats;

    public ExecutorSummary Exec_summary
    {
      get
      {
        return _exec_summary;
      }
      set
      {
        __isset.exec_summary = true;
        this._exec_summary = value;
      }
    }

    public ComponentAggregateStats Stats
    {
      get
      {
        return _stats;
      }
      set
      {
        __isset.stats = true;
        this._stats = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool exec_summary;
      public bool stats;
    }

    public ExecutorAggregateStats() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Exec_summary = new ExecutorSummary();
              Exec_summary.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Stats = new ComponentAggregateStats();
              Stats.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ExecutorAggregateStats");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Exec_summary != null && __isset.exec_summary) {
        field.Name = "exec_summary";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Exec_summary.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Stats != null && __isset.stats) {
        field.Name = "stats";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Stats.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ExecutorAggregateStats(");
      sb.Append("Exec_summary: ");
      sb.Append(Exec_summary== null ? "<null>" : Exec_summary.ToString());
      sb.Append(",Stats: ");
      sb.Append(Stats== null ? "<null>" : Stats.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
