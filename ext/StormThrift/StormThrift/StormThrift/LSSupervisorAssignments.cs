/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StormThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class LSSupervisorAssignments : TBase
  {

    public Dictionary<int, LocalAssignment> Assignments { get; set; }

    public LSSupervisorAssignments() {
    }

    public LSSupervisorAssignments(Dictionary<int, LocalAssignment> assignments) : this() {
      this.Assignments = assignments;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_assignments = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                Assignments = new Dictionary<int, LocalAssignment>();
                TMap _map331 = iprot.ReadMapBegin();
                for( int _i332 = 0; _i332 < _map331.Count; ++_i332)
                {
                  int _key333;
                  LocalAssignment _val334;
                  _key333 = iprot.ReadI32();
                  _val334 = new LocalAssignment();
                  _val334.Read(iprot);
                  Assignments[_key333] = _val334;
                }
                iprot.ReadMapEnd();
              }
              isset_assignments = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_assignments)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("LSSupervisorAssignments");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "assignments";
      field.Type = TType.Map;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Assignments.Count));
        foreach (int _iter335 in Assignments.Keys)
        {
          oprot.WriteI32(_iter335);
          Assignments[_iter335].Write(oprot);
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("LSSupervisorAssignments(");
      sb.Append("Assignments: ");
      sb.Append(Assignments);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
