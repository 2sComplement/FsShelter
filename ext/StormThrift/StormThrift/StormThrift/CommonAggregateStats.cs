/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StormThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CommonAggregateStats : TBase
  {
    private int _num_executors;
    private int _num_tasks;
    private long _emitted;
    private long _transferred;
    private long _acked;
    private long _failed;

    public int Num_executors
    {
      get
      {
        return _num_executors;
      }
      set
      {
        __isset.num_executors = true;
        this._num_executors = value;
      }
    }

    public int Num_tasks
    {
      get
      {
        return _num_tasks;
      }
      set
      {
        __isset.num_tasks = true;
        this._num_tasks = value;
      }
    }

    public long Emitted
    {
      get
      {
        return _emitted;
      }
      set
      {
        __isset.emitted = true;
        this._emitted = value;
      }
    }

    public long Transferred
    {
      get
      {
        return _transferred;
      }
      set
      {
        __isset.transferred = true;
        this._transferred = value;
      }
    }

    public long Acked
    {
      get
      {
        return _acked;
      }
      set
      {
        __isset.acked = true;
        this._acked = value;
      }
    }

    public long Failed
    {
      get
      {
        return _failed;
      }
      set
      {
        __isset.failed = true;
        this._failed = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool num_executors;
      public bool num_tasks;
      public bool emitted;
      public bool transferred;
      public bool acked;
      public bool failed;
    }

    public CommonAggregateStats() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Num_executors = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Num_tasks = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              Emitted = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              Transferred = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              Acked = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              Failed = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CommonAggregateStats");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.num_executors) {
        field.Name = "num_executors";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Num_executors);
        oprot.WriteFieldEnd();
      }
      if (__isset.num_tasks) {
        field.Name = "num_tasks";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Num_tasks);
        oprot.WriteFieldEnd();
      }
      if (__isset.emitted) {
        field.Name = "emitted";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Emitted);
        oprot.WriteFieldEnd();
      }
      if (__isset.transferred) {
        field.Name = "transferred";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Transferred);
        oprot.WriteFieldEnd();
      }
      if (__isset.acked) {
        field.Name = "acked";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Acked);
        oprot.WriteFieldEnd();
      }
      if (__isset.failed) {
        field.Name = "failed";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Failed);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CommonAggregateStats(");
      sb.Append("Num_executors: ");
      sb.Append(Num_executors);
      sb.Append(",Num_tasks: ");
      sb.Append(Num_tasks);
      sb.Append(",Emitted: ");
      sb.Append(Emitted);
      sb.Append(",Transferred: ");
      sb.Append(Transferred);
      sb.Append(",Acked: ");
      sb.Append(Acked);
      sb.Append(",Failed: ");
      sb.Append(Failed);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
