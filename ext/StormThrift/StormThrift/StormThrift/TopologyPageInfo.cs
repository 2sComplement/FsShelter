/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StormThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TopologyPageInfo : TBase
  {
    private string _name;
    private int _uptime_secs;
    private string _status;
    private int _num_tasks;
    private int _num_workers;
    private int _num_executors;
    private string _topology_conf;
    private Dictionary<string, ComponentAggregateStats> _id_to_spout_agg_stats;
    private Dictionary<string, ComponentAggregateStats> _id_to_bolt_agg_stats;
    private string _sched_status;
    private TopologyStats _topology_stats;
    private string _owner;
    private DebugOptions _debug_options;
    private int _replication_count;
    private double _requested_memonheap;
    private double _requested_memoffheap;
    private double _requested_cpu;
    private double _assigned_memonheap;
    private double _assigned_memoffheap;
    private double _assigned_cpu;

    public string Id { get; set; }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int Uptime_secs
    {
      get
      {
        return _uptime_secs;
      }
      set
      {
        __isset.uptime_secs = true;
        this._uptime_secs = value;
      }
    }

    public string Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }

    public int Num_tasks
    {
      get
      {
        return _num_tasks;
      }
      set
      {
        __isset.num_tasks = true;
        this._num_tasks = value;
      }
    }

    public int Num_workers
    {
      get
      {
        return _num_workers;
      }
      set
      {
        __isset.num_workers = true;
        this._num_workers = value;
      }
    }

    public int Num_executors
    {
      get
      {
        return _num_executors;
      }
      set
      {
        __isset.num_executors = true;
        this._num_executors = value;
      }
    }

    public string Topology_conf
    {
      get
      {
        return _topology_conf;
      }
      set
      {
        __isset.topology_conf = true;
        this._topology_conf = value;
      }
    }

    public Dictionary<string, ComponentAggregateStats> Id_to_spout_agg_stats
    {
      get
      {
        return _id_to_spout_agg_stats;
      }
      set
      {
        __isset.id_to_spout_agg_stats = true;
        this._id_to_spout_agg_stats = value;
      }
    }

    public Dictionary<string, ComponentAggregateStats> Id_to_bolt_agg_stats
    {
      get
      {
        return _id_to_bolt_agg_stats;
      }
      set
      {
        __isset.id_to_bolt_agg_stats = true;
        this._id_to_bolt_agg_stats = value;
      }
    }

    public string Sched_status
    {
      get
      {
        return _sched_status;
      }
      set
      {
        __isset.sched_status = true;
        this._sched_status = value;
      }
    }

    public TopologyStats Topology_stats
    {
      get
      {
        return _topology_stats;
      }
      set
      {
        __isset.topology_stats = true;
        this._topology_stats = value;
      }
    }

    public string Owner
    {
      get
      {
        return _owner;
      }
      set
      {
        __isset.owner = true;
        this._owner = value;
      }
    }

    public DebugOptions Debug_options
    {
      get
      {
        return _debug_options;
      }
      set
      {
        __isset.debug_options = true;
        this._debug_options = value;
      }
    }

    public int Replication_count
    {
      get
      {
        return _replication_count;
      }
      set
      {
        __isset.replication_count = true;
        this._replication_count = value;
      }
    }

    public double Requested_memonheap
    {
      get
      {
        return _requested_memonheap;
      }
      set
      {
        __isset.requested_memonheap = true;
        this._requested_memonheap = value;
      }
    }

    public double Requested_memoffheap
    {
      get
      {
        return _requested_memoffheap;
      }
      set
      {
        __isset.requested_memoffheap = true;
        this._requested_memoffheap = value;
      }
    }

    public double Requested_cpu
    {
      get
      {
        return _requested_cpu;
      }
      set
      {
        __isset.requested_cpu = true;
        this._requested_cpu = value;
      }
    }

    public double Assigned_memonheap
    {
      get
      {
        return _assigned_memonheap;
      }
      set
      {
        __isset.assigned_memonheap = true;
        this._assigned_memonheap = value;
      }
    }

    public double Assigned_memoffheap
    {
      get
      {
        return _assigned_memoffheap;
      }
      set
      {
        __isset.assigned_memoffheap = true;
        this._assigned_memoffheap = value;
      }
    }

    public double Assigned_cpu
    {
      get
      {
        return _assigned_cpu;
      }
      set
      {
        __isset.assigned_cpu = true;
        this._assigned_cpu = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool uptime_secs;
      public bool status;
      public bool num_tasks;
      public bool num_workers;
      public bool num_executors;
      public bool topology_conf;
      public bool id_to_spout_agg_stats;
      public bool id_to_bolt_agg_stats;
      public bool sched_status;
      public bool topology_stats;
      public bool owner;
      public bool debug_options;
      public bool replication_count;
      public bool requested_memonheap;
      public bool requested_memoffheap;
      public bool requested_cpu;
      public bool assigned_memonheap;
      public bool assigned_memoffheap;
      public bool assigned_cpu;
    }

    public TopologyPageInfo() {
    }

    public TopologyPageInfo(string id) : this() {
      this.Id = id;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_id = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
              isset_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Uptime_secs = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Status = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Num_tasks = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Num_workers = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Num_executors = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Topology_conf = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Map) {
              {
                Id_to_spout_agg_stats = new Dictionary<string, ComponentAggregateStats>();
                TMap _map201 = iprot.ReadMapBegin();
                for( int _i202 = 0; _i202 < _map201.Count; ++_i202)
                {
                  string _key203;
                  ComponentAggregateStats _val204;
                  _key203 = iprot.ReadString();
                  _val204 = new ComponentAggregateStats();
                  _val204.Read(iprot);
                  Id_to_spout_agg_stats[_key203] = _val204;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Map) {
              {
                Id_to_bolt_agg_stats = new Dictionary<string, ComponentAggregateStats>();
                TMap _map205 = iprot.ReadMapBegin();
                for( int _i206 = 0; _i206 < _map205.Count; ++_i206)
                {
                  string _key207;
                  ComponentAggregateStats _val208;
                  _key207 = iprot.ReadString();
                  _val208 = new ComponentAggregateStats();
                  _val208.Read(iprot);
                  Id_to_bolt_agg_stats[_key207] = _val208;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              Sched_status = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Struct) {
              Topology_stats = new TopologyStats();
              Topology_stats.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              Owner = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.Struct) {
              Debug_options = new DebugOptions();
              Debug_options.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I32) {
              Replication_count = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 521:
            if (field.Type == TType.Double) {
              Requested_memonheap = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 522:
            if (field.Type == TType.Double) {
              Requested_memoffheap = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 523:
            if (field.Type == TType.Double) {
              Requested_cpu = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 524:
            if (field.Type == TType.Double) {
              Assigned_memonheap = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 525:
            if (field.Type == TType.Double) {
              Assigned_memoffheap = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 526:
            if (field.Type == TType.Double) {
              Assigned_cpu = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_id)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TopologyPageInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "id";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Id);
      oprot.WriteFieldEnd();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.uptime_secs) {
        field.Name = "uptime_secs";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Uptime_secs);
        oprot.WriteFieldEnd();
      }
      if (Status != null && __isset.status) {
        field.Name = "status";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Status);
        oprot.WriteFieldEnd();
      }
      if (__isset.num_tasks) {
        field.Name = "num_tasks";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Num_tasks);
        oprot.WriteFieldEnd();
      }
      if (__isset.num_workers) {
        field.Name = "num_workers";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Num_workers);
        oprot.WriteFieldEnd();
      }
      if (__isset.num_executors) {
        field.Name = "num_executors";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Num_executors);
        oprot.WriteFieldEnd();
      }
      if (Topology_conf != null && __isset.topology_conf) {
        field.Name = "topology_conf";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Topology_conf);
        oprot.WriteFieldEnd();
      }
      if (Id_to_spout_agg_stats != null && __isset.id_to_spout_agg_stats) {
        field.Name = "id_to_spout_agg_stats";
        field.Type = TType.Map;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Id_to_spout_agg_stats.Count));
          foreach (string _iter209 in Id_to_spout_agg_stats.Keys)
          {
            oprot.WriteString(_iter209);
            Id_to_spout_agg_stats[_iter209].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Id_to_bolt_agg_stats != null && __isset.id_to_bolt_agg_stats) {
        field.Name = "id_to_bolt_agg_stats";
        field.Type = TType.Map;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Id_to_bolt_agg_stats.Count));
          foreach (string _iter210 in Id_to_bolt_agg_stats.Keys)
          {
            oprot.WriteString(_iter210);
            Id_to_bolt_agg_stats[_iter210].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Sched_status != null && __isset.sched_status) {
        field.Name = "sched_status";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Sched_status);
        oprot.WriteFieldEnd();
      }
      if (Topology_stats != null && __isset.topology_stats) {
        field.Name = "topology_stats";
        field.Type = TType.Struct;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        Topology_stats.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Owner != null && __isset.owner) {
        field.Name = "owner";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Owner);
        oprot.WriteFieldEnd();
      }
      if (Debug_options != null && __isset.debug_options) {
        field.Name = "debug_options";
        field.Type = TType.Struct;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        Debug_options.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.replication_count) {
        field.Name = "replication_count";
        field.Type = TType.I32;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Replication_count);
        oprot.WriteFieldEnd();
      }
      if (__isset.requested_memonheap) {
        field.Name = "requested_memonheap";
        field.Type = TType.Double;
        field.ID = 521;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Requested_memonheap);
        oprot.WriteFieldEnd();
      }
      if (__isset.requested_memoffheap) {
        field.Name = "requested_memoffheap";
        field.Type = TType.Double;
        field.ID = 522;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Requested_memoffheap);
        oprot.WriteFieldEnd();
      }
      if (__isset.requested_cpu) {
        field.Name = "requested_cpu";
        field.Type = TType.Double;
        field.ID = 523;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Requested_cpu);
        oprot.WriteFieldEnd();
      }
      if (__isset.assigned_memonheap) {
        field.Name = "assigned_memonheap";
        field.Type = TType.Double;
        field.ID = 524;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Assigned_memonheap);
        oprot.WriteFieldEnd();
      }
      if (__isset.assigned_memoffheap) {
        field.Name = "assigned_memoffheap";
        field.Type = TType.Double;
        field.ID = 525;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Assigned_memoffheap);
        oprot.WriteFieldEnd();
      }
      if (__isset.assigned_cpu) {
        field.Name = "assigned_cpu";
        field.Type = TType.Double;
        field.ID = 526;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Assigned_cpu);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TopologyPageInfo(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",Uptime_secs: ");
      sb.Append(Uptime_secs);
      sb.Append(",Status: ");
      sb.Append(Status);
      sb.Append(",Num_tasks: ");
      sb.Append(Num_tasks);
      sb.Append(",Num_workers: ");
      sb.Append(Num_workers);
      sb.Append(",Num_executors: ");
      sb.Append(Num_executors);
      sb.Append(",Topology_conf: ");
      sb.Append(Topology_conf);
      sb.Append(",Id_to_spout_agg_stats: ");
      sb.Append(Id_to_spout_agg_stats);
      sb.Append(",Id_to_bolt_agg_stats: ");
      sb.Append(Id_to_bolt_agg_stats);
      sb.Append(",Sched_status: ");
      sb.Append(Sched_status);
      sb.Append(",Topology_stats: ");
      sb.Append(Topology_stats== null ? "<null>" : Topology_stats.ToString());
      sb.Append(",Owner: ");
      sb.Append(Owner);
      sb.Append(",Debug_options: ");
      sb.Append(Debug_options== null ? "<null>" : Debug_options.ToString());
      sb.Append(",Replication_count: ");
      sb.Append(Replication_count);
      sb.Append(",Requested_memonheap: ");
      sb.Append(Requested_memonheap);
      sb.Append(",Requested_memoffheap: ");
      sb.Append(Requested_memoffheap);
      sb.Append(",Requested_cpu: ");
      sb.Append(Requested_cpu);
      sb.Append(",Assigned_memonheap: ");
      sb.Append(Assigned_memonheap);
      sb.Append(",Assigned_memoffheap: ");
      sb.Append(Assigned_memoffheap);
      sb.Append(",Assigned_cpu: ");
      sb.Append(Assigned_cpu);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
