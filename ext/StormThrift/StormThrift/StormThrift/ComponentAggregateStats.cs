/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StormThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ComponentAggregateStats : TBase
  {
    private ComponentType _type;
    private CommonAggregateStats _common_stats;
    private SpecificAggregateStats _specific_stats;
    private ErrorInfo _last_error;

    /// <summary>
    /// 
    /// <seealso cref="ComponentType"/>
    /// </summary>
    public ComponentType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public CommonAggregateStats Common_stats
    {
      get
      {
        return _common_stats;
      }
      set
      {
        __isset.common_stats = true;
        this._common_stats = value;
      }
    }

    public SpecificAggregateStats Specific_stats
    {
      get
      {
        return _specific_stats;
      }
      set
      {
        __isset.specific_stats = true;
        this._specific_stats = value;
      }
    }

    public ErrorInfo Last_error
    {
      get
      {
        return _last_error;
      }
      set
      {
        __isset.last_error = true;
        this._last_error = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool type;
      public bool common_stats;
      public bool specific_stats;
      public bool last_error;
    }

    public ComponentAggregateStats() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Type = (ComponentType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Common_stats = new CommonAggregateStats();
              Common_stats.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Specific_stats = new SpecificAggregateStats();
              Specific_stats.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              Last_error = new ErrorInfo();
              Last_error.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ComponentAggregateStats");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Type);
        oprot.WriteFieldEnd();
      }
      if (Common_stats != null && __isset.common_stats) {
        field.Name = "common_stats";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Common_stats.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Specific_stats != null && __isset.specific_stats) {
        field.Name = "specific_stats";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Specific_stats.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Last_error != null && __isset.last_error) {
        field.Name = "last_error";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        Last_error.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ComponentAggregateStats(");
      sb.Append("Type: ");
      sb.Append(Type);
      sb.Append(",Common_stats: ");
      sb.Append(Common_stats== null ? "<null>" : Common_stats.ToString());
      sb.Append(",Specific_stats: ");
      sb.Append(Specific_stats== null ? "<null>" : Specific_stats.ToString());
      sb.Append(",Last_error: ");
      sb.Append(Last_error== null ? "<null>" : Last_error.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
