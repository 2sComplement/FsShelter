/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StormThrift
{
  public partial class Nimbus {
    public interface Iface {
      void submitTopology(string name, string uploadedJarLocation, string jsonConf, StormTopology topology);
      #if SILVERLIGHT
      IAsyncResult Begin_submitTopology(AsyncCallback callback, object state, string name, string uploadedJarLocation, string jsonConf, StormTopology topology);
      void End_submitTopology(IAsyncResult asyncResult);
      #endif
      void submitTopologyWithOpts(string name, string uploadedJarLocation, string jsonConf, StormTopology topology, SubmitOptions options);
      #if SILVERLIGHT
      IAsyncResult Begin_submitTopologyWithOpts(AsyncCallback callback, object state, string name, string uploadedJarLocation, string jsonConf, StormTopology topology, SubmitOptions options);
      void End_submitTopologyWithOpts(IAsyncResult asyncResult);
      #endif
      void killTopology(string name);
      #if SILVERLIGHT
      IAsyncResult Begin_killTopology(AsyncCallback callback, object state, string name);
      void End_killTopology(IAsyncResult asyncResult);
      #endif
      void killTopologyWithOpts(string name, KillOptions options);
      #if SILVERLIGHT
      IAsyncResult Begin_killTopologyWithOpts(AsyncCallback callback, object state, string name, KillOptions options);
      void End_killTopologyWithOpts(IAsyncResult asyncResult);
      #endif
      void activate(string name);
      #if SILVERLIGHT
      IAsyncResult Begin_activate(AsyncCallback callback, object state, string name);
      void End_activate(IAsyncResult asyncResult);
      #endif
      void deactivate(string name);
      #if SILVERLIGHT
      IAsyncResult Begin_deactivate(AsyncCallback callback, object state, string name);
      void End_deactivate(IAsyncResult asyncResult);
      #endif
      void rebalance(string name, RebalanceOptions options);
      #if SILVERLIGHT
      IAsyncResult Begin_rebalance(AsyncCallback callback, object state, string name, RebalanceOptions options);
      void End_rebalance(IAsyncResult asyncResult);
      #endif
      void setLogConfig(string name, LogConfig config);
      #if SILVERLIGHT
      IAsyncResult Begin_setLogConfig(AsyncCallback callback, object state, string name, LogConfig config);
      void End_setLogConfig(IAsyncResult asyncResult);
      #endif
      LogConfig getLogConfig(string name);
      #if SILVERLIGHT
      IAsyncResult Begin_getLogConfig(AsyncCallback callback, object state, string name);
      LogConfig End_getLogConfig(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Enable/disable logging the tuples generated in topology via an internal EventLogger bolt. The component name is optional
      /// and if null or empty, the debug flag will apply to the entire topology.
      /// 
      /// The 'samplingPercentage' will limit loggging to a percentage of generated tuples.
      /// 
      /// </summary>
      /// <param name="name"></param>
      /// <param name="component"></param>
      /// <param name="enable"></param>
      /// <param name="samplingPercentage"></param>
      void debug(string name, string component, bool enable, double samplingPercentage);
      #if SILVERLIGHT
      IAsyncResult Begin_debug(AsyncCallback callback, object state, string name, string component, bool enable, double samplingPercentage);
      void End_debug(IAsyncResult asyncResult);
      #endif
      void setWorkerProfiler(string id, ProfileRequest profileRequest);
      #if SILVERLIGHT
      IAsyncResult Begin_setWorkerProfiler(AsyncCallback callback, object state, string id, ProfileRequest profileRequest);
      void End_setWorkerProfiler(IAsyncResult asyncResult);
      #endif
      List<ProfileRequest> getComponentPendingProfileActions(string id, string component_id, ProfileAction action);
      #if SILVERLIGHT
      IAsyncResult Begin_getComponentPendingProfileActions(AsyncCallback callback, object state, string id, string component_id, ProfileAction action);
      List<ProfileRequest> End_getComponentPendingProfileActions(IAsyncResult asyncResult);
      #endif
      void uploadNewCredentials(string name, Credentials creds);
      #if SILVERLIGHT
      IAsyncResult Begin_uploadNewCredentials(AsyncCallback callback, object state, string name, Credentials creds);
      void End_uploadNewCredentials(IAsyncResult asyncResult);
      #endif
      string beginCreateBlob(string key, SettableBlobMeta meta);
      #if SILVERLIGHT
      IAsyncResult Begin_beginCreateBlob(AsyncCallback callback, object state, string key, SettableBlobMeta meta);
      string End_beginCreateBlob(IAsyncResult asyncResult);
      #endif
      string beginUpdateBlob(string key);
      #if SILVERLIGHT
      IAsyncResult Begin_beginUpdateBlob(AsyncCallback callback, object state, string key);
      string End_beginUpdateBlob(IAsyncResult asyncResult);
      #endif
      void uploadBlobChunk(string session, byte[] chunk);
      #if SILVERLIGHT
      IAsyncResult Begin_uploadBlobChunk(AsyncCallback callback, object state, string session, byte[] chunk);
      void End_uploadBlobChunk(IAsyncResult asyncResult);
      #endif
      void finishBlobUpload(string session);
      #if SILVERLIGHT
      IAsyncResult Begin_finishBlobUpload(AsyncCallback callback, object state, string session);
      void End_finishBlobUpload(IAsyncResult asyncResult);
      #endif
      void cancelBlobUpload(string session);
      #if SILVERLIGHT
      IAsyncResult Begin_cancelBlobUpload(AsyncCallback callback, object state, string session);
      void End_cancelBlobUpload(IAsyncResult asyncResult);
      #endif
      ReadableBlobMeta getBlobMeta(string key);
      #if SILVERLIGHT
      IAsyncResult Begin_getBlobMeta(AsyncCallback callback, object state, string key);
      ReadableBlobMeta End_getBlobMeta(IAsyncResult asyncResult);
      #endif
      void setBlobMeta(string key, SettableBlobMeta meta);
      #if SILVERLIGHT
      IAsyncResult Begin_setBlobMeta(AsyncCallback callback, object state, string key, SettableBlobMeta meta);
      void End_setBlobMeta(IAsyncResult asyncResult);
      #endif
      BeginDownloadResult beginBlobDownload(string key);
      #if SILVERLIGHT
      IAsyncResult Begin_beginBlobDownload(AsyncCallback callback, object state, string key);
      BeginDownloadResult End_beginBlobDownload(IAsyncResult asyncResult);
      #endif
      byte[] downloadBlobChunk(string session);
      #if SILVERLIGHT
      IAsyncResult Begin_downloadBlobChunk(AsyncCallback callback, object state, string session);
      byte[] End_downloadBlobChunk(IAsyncResult asyncResult);
      #endif
      void deleteBlob(string key);
      #if SILVERLIGHT
      IAsyncResult Begin_deleteBlob(AsyncCallback callback, object state, string key);
      void End_deleteBlob(IAsyncResult asyncResult);
      #endif
      ListBlobsResult listBlobs(string session);
      #if SILVERLIGHT
      IAsyncResult Begin_listBlobs(AsyncCallback callback, object state, string session);
      ListBlobsResult End_listBlobs(IAsyncResult asyncResult);
      #endif
      int getBlobReplication(string key);
      #if SILVERLIGHT
      IAsyncResult Begin_getBlobReplication(AsyncCallback callback, object state, string key);
      int End_getBlobReplication(IAsyncResult asyncResult);
      #endif
      int updateBlobReplication(string key, int replication);
      #if SILVERLIGHT
      IAsyncResult Begin_updateBlobReplication(AsyncCallback callback, object state, string key, int replication);
      int End_updateBlobReplication(IAsyncResult asyncResult);
      #endif
      void createStateInZookeeper(string key);
      #if SILVERLIGHT
      IAsyncResult Begin_createStateInZookeeper(AsyncCallback callback, object state, string key);
      void End_createStateInZookeeper(IAsyncResult asyncResult);
      #endif
      string beginFileUpload();
      #if SILVERLIGHT
      IAsyncResult Begin_beginFileUpload(AsyncCallback callback, object state);
      string End_beginFileUpload(IAsyncResult asyncResult);
      #endif
      void uploadChunk(string location, byte[] chunk);
      #if SILVERLIGHT
      IAsyncResult Begin_uploadChunk(AsyncCallback callback, object state, string location, byte[] chunk);
      void End_uploadChunk(IAsyncResult asyncResult);
      #endif
      void finishFileUpload(string location);
      #if SILVERLIGHT
      IAsyncResult Begin_finishFileUpload(AsyncCallback callback, object state, string location);
      void End_finishFileUpload(IAsyncResult asyncResult);
      #endif
      string beginFileDownload(string file);
      #if SILVERLIGHT
      IAsyncResult Begin_beginFileDownload(AsyncCallback callback, object state, string file);
      string End_beginFileDownload(IAsyncResult asyncResult);
      #endif
      byte[] downloadChunk(string id);
      #if SILVERLIGHT
      IAsyncResult Begin_downloadChunk(AsyncCallback callback, object state, string id);
      byte[] End_downloadChunk(IAsyncResult asyncResult);
      #endif
      string getNimbusConf();
      #if SILVERLIGHT
      IAsyncResult Begin_getNimbusConf(AsyncCallback callback, object state);
      string End_getNimbusConf(IAsyncResult asyncResult);
      #endif
      ClusterSummary getClusterInfo();
      #if SILVERLIGHT
      IAsyncResult Begin_getClusterInfo(AsyncCallback callback, object state);
      ClusterSummary End_getClusterInfo(IAsyncResult asyncResult);
      #endif
      TopologyInfo getTopologyInfo(string id);
      #if SILVERLIGHT
      IAsyncResult Begin_getTopologyInfo(AsyncCallback callback, object state, string id);
      TopologyInfo End_getTopologyInfo(IAsyncResult asyncResult);
      #endif
      TopologyInfo getTopologyInfoWithOpts(string id, GetInfoOptions options);
      #if SILVERLIGHT
      IAsyncResult Begin_getTopologyInfoWithOpts(AsyncCallback callback, object state, string id, GetInfoOptions options);
      TopologyInfo End_getTopologyInfoWithOpts(IAsyncResult asyncResult);
      #endif
      TopologyPageInfo getTopologyPageInfo(string id, string window, bool is_include_sys);
      #if SILVERLIGHT
      IAsyncResult Begin_getTopologyPageInfo(AsyncCallback callback, object state, string id, string window, bool is_include_sys);
      TopologyPageInfo End_getTopologyPageInfo(IAsyncResult asyncResult);
      #endif
      ComponentPageInfo getComponentPageInfo(string topology_id, string component_id, string window, bool is_include_sys);
      #if SILVERLIGHT
      IAsyncResult Begin_getComponentPageInfo(AsyncCallback callback, object state, string topology_id, string component_id, string window, bool is_include_sys);
      ComponentPageInfo End_getComponentPageInfo(IAsyncResult asyncResult);
      #endif
      string getTopologyConf(string id);
      #if SILVERLIGHT
      IAsyncResult Begin_getTopologyConf(AsyncCallback callback, object state, string id);
      string End_getTopologyConf(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns the compiled topology that contains ackers and metrics consumsers. Compare {@link #getUserTopology(String id)}.
      /// </summary>
      /// <param name="id"></param>
      StormTopology getTopology(string id);
      #if SILVERLIGHT
      IAsyncResult Begin_getTopology(AsyncCallback callback, object state, string id);
      StormTopology End_getTopology(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns the user specified topology as submitted originally. Compare {@link #getTopology(String id)}.
      /// </summary>
      /// <param name="id"></param>
      StormTopology getUserTopology(string id);
      #if SILVERLIGHT
      IAsyncResult Begin_getUserTopology(AsyncCallback callback, object state, string id);
      StormTopology End_getUserTopology(IAsyncResult asyncResult);
      #endif
      TopologyHistoryInfo getTopologyHistory(string user);
      #if SILVERLIGHT
      IAsyncResult Begin_getTopologyHistory(AsyncCallback callback, object state, string user);
      TopologyHistoryInfo End_getTopologyHistory(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_submitTopology(AsyncCallback callback, object state, string name, string uploadedJarLocation, string jsonConf, StormTopology topology)
      {
        return send_submitTopology(callback, state, name, uploadedJarLocation, jsonConf, topology);
      }

      public void End_submitTopology(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_submitTopology();
      }

      #endif

      public void submitTopology(string name, string uploadedJarLocation, string jsonConf, StormTopology topology)
      {
        #if !SILVERLIGHT
        send_submitTopology(name, uploadedJarLocation, jsonConf, topology);
        recv_submitTopology();

        #else
        var asyncResult = Begin_submitTopology(null, null, name, uploadedJarLocation, jsonConf, topology);
        End_submitTopology(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_submitTopology(AsyncCallback callback, object state, string name, string uploadedJarLocation, string jsonConf, StormTopology topology)
      #else
      public void send_submitTopology(string name, string uploadedJarLocation, string jsonConf, StormTopology topology)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("submitTopology", TMessageType.Call, seqid_));
        submitTopology_args args = new submitTopology_args();
        args.Name = name;
        args.UploadedJarLocation = uploadedJarLocation;
        args.JsonConf = jsonConf;
        args.Topology = topology;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_submitTopology()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        submitTopology_result result = new submitTopology_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        if (result.__isset.ite) {
          throw result.Ite;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_submitTopologyWithOpts(AsyncCallback callback, object state, string name, string uploadedJarLocation, string jsonConf, StormTopology topology, SubmitOptions options)
      {
        return send_submitTopologyWithOpts(callback, state, name, uploadedJarLocation, jsonConf, topology, options);
      }

      public void End_submitTopologyWithOpts(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_submitTopologyWithOpts();
      }

      #endif

      public void submitTopologyWithOpts(string name, string uploadedJarLocation, string jsonConf, StormTopology topology, SubmitOptions options)
      {
        #if !SILVERLIGHT
        send_submitTopologyWithOpts(name, uploadedJarLocation, jsonConf, topology, options);
        recv_submitTopologyWithOpts();

        #else
        var asyncResult = Begin_submitTopologyWithOpts(null, null, name, uploadedJarLocation, jsonConf, topology, options);
        End_submitTopologyWithOpts(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_submitTopologyWithOpts(AsyncCallback callback, object state, string name, string uploadedJarLocation, string jsonConf, StormTopology topology, SubmitOptions options)
      #else
      public void send_submitTopologyWithOpts(string name, string uploadedJarLocation, string jsonConf, StormTopology topology, SubmitOptions options)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("submitTopologyWithOpts", TMessageType.Call, seqid_));
        submitTopologyWithOpts_args args = new submitTopologyWithOpts_args();
        args.Name = name;
        args.UploadedJarLocation = uploadedJarLocation;
        args.JsonConf = jsonConf;
        args.Topology = topology;
        args.Options = options;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_submitTopologyWithOpts()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        submitTopologyWithOpts_result result = new submitTopologyWithOpts_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        if (result.__isset.ite) {
          throw result.Ite;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_killTopology(AsyncCallback callback, object state, string name)
      {
        return send_killTopology(callback, state, name);
      }

      public void End_killTopology(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_killTopology();
      }

      #endif

      public void killTopology(string name)
      {
        #if !SILVERLIGHT
        send_killTopology(name);
        recv_killTopology();

        #else
        var asyncResult = Begin_killTopology(null, null, name);
        End_killTopology(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_killTopology(AsyncCallback callback, object state, string name)
      #else
      public void send_killTopology(string name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("killTopology", TMessageType.Call, seqid_));
        killTopology_args args = new killTopology_args();
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_killTopology()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        killTopology_result result = new killTopology_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_killTopologyWithOpts(AsyncCallback callback, object state, string name, KillOptions options)
      {
        return send_killTopologyWithOpts(callback, state, name, options);
      }

      public void End_killTopologyWithOpts(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_killTopologyWithOpts();
      }

      #endif

      public void killTopologyWithOpts(string name, KillOptions options)
      {
        #if !SILVERLIGHT
        send_killTopologyWithOpts(name, options);
        recv_killTopologyWithOpts();

        #else
        var asyncResult = Begin_killTopologyWithOpts(null, null, name, options);
        End_killTopologyWithOpts(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_killTopologyWithOpts(AsyncCallback callback, object state, string name, KillOptions options)
      #else
      public void send_killTopologyWithOpts(string name, KillOptions options)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("killTopologyWithOpts", TMessageType.Call, seqid_));
        killTopologyWithOpts_args args = new killTopologyWithOpts_args();
        args.Name = name;
        args.Options = options;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_killTopologyWithOpts()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        killTopologyWithOpts_result result = new killTopologyWithOpts_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_activate(AsyncCallback callback, object state, string name)
      {
        return send_activate(callback, state, name);
      }

      public void End_activate(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_activate();
      }

      #endif

      public void activate(string name)
      {
        #if !SILVERLIGHT
        send_activate(name);
        recv_activate();

        #else
        var asyncResult = Begin_activate(null, null, name);
        End_activate(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_activate(AsyncCallback callback, object state, string name)
      #else
      public void send_activate(string name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("activate", TMessageType.Call, seqid_));
        activate_args args = new activate_args();
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_activate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        activate_result result = new activate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deactivate(AsyncCallback callback, object state, string name)
      {
        return send_deactivate(callback, state, name);
      }

      public void End_deactivate(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_deactivate();
      }

      #endif

      public void deactivate(string name)
      {
        #if !SILVERLIGHT
        send_deactivate(name);
        recv_deactivate();

        #else
        var asyncResult = Begin_deactivate(null, null, name);
        End_deactivate(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deactivate(AsyncCallback callback, object state, string name)
      #else
      public void send_deactivate(string name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deactivate", TMessageType.Call, seqid_));
        deactivate_args args = new deactivate_args();
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_deactivate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deactivate_result result = new deactivate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_rebalance(AsyncCallback callback, object state, string name, RebalanceOptions options)
      {
        return send_rebalance(callback, state, name, options);
      }

      public void End_rebalance(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_rebalance();
      }

      #endif

      public void rebalance(string name, RebalanceOptions options)
      {
        #if !SILVERLIGHT
        send_rebalance(name, options);
        recv_rebalance();

        #else
        var asyncResult = Begin_rebalance(null, null, name, options);
        End_rebalance(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_rebalance(AsyncCallback callback, object state, string name, RebalanceOptions options)
      #else
      public void send_rebalance(string name, RebalanceOptions options)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("rebalance", TMessageType.Call, seqid_));
        rebalance_args args = new rebalance_args();
        args.Name = name;
        args.Options = options;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_rebalance()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        rebalance_result result = new rebalance_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        if (result.__isset.ite) {
          throw result.Ite;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setLogConfig(AsyncCallback callback, object state, string name, LogConfig config)
      {
        return send_setLogConfig(callback, state, name, config);
      }

      public void End_setLogConfig(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_setLogConfig();
      }

      #endif

      public void setLogConfig(string name, LogConfig config)
      {
        #if !SILVERLIGHT
        send_setLogConfig(name, config);
        recv_setLogConfig();

        #else
        var asyncResult = Begin_setLogConfig(null, null, name, config);
        End_setLogConfig(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setLogConfig(AsyncCallback callback, object state, string name, LogConfig config)
      #else
      public void send_setLogConfig(string name, LogConfig config)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setLogConfig", TMessageType.Call, seqid_));
        setLogConfig_args args = new setLogConfig_args();
        args.Name = name;
        args.Config = config;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_setLogConfig()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setLogConfig_result result = new setLogConfig_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getLogConfig(AsyncCallback callback, object state, string name)
      {
        return send_getLogConfig(callback, state, name);
      }

      public LogConfig End_getLogConfig(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getLogConfig();
      }

      #endif

      public LogConfig getLogConfig(string name)
      {
        #if !SILVERLIGHT
        send_getLogConfig(name);
        return recv_getLogConfig();

        #else
        var asyncResult = Begin_getLogConfig(null, null, name);
        return End_getLogConfig(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getLogConfig(AsyncCallback callback, object state, string name)
      #else
      public void send_getLogConfig(string name)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getLogConfig", TMessageType.Call, seqid_));
        getLogConfig_args args = new getLogConfig_args();
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public LogConfig recv_getLogConfig()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getLogConfig_result result = new getLogConfig_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getLogConfig failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_debug(AsyncCallback callback, object state, string name, string component, bool enable, double samplingPercentage)
      {
        return send_debug(callback, state, name, component, enable, samplingPercentage);
      }

      public void End_debug(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_debug();
      }

      #endif

      /// <summary>
      /// Enable/disable logging the tuples generated in topology via an internal EventLogger bolt. The component name is optional
      /// and if null or empty, the debug flag will apply to the entire topology.
      /// 
      /// The 'samplingPercentage' will limit loggging to a percentage of generated tuples.
      /// 
      /// </summary>
      /// <param name="name"></param>
      /// <param name="component"></param>
      /// <param name="enable"></param>
      /// <param name="samplingPercentage"></param>
      public void debug(string name, string component, bool enable, double samplingPercentage)
      {
        #if !SILVERLIGHT
        send_debug(name, component, enable, samplingPercentage);
        recv_debug();

        #else
        var asyncResult = Begin_debug(null, null, name, component, enable, samplingPercentage);
        End_debug(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_debug(AsyncCallback callback, object state, string name, string component, bool enable, double samplingPercentage)
      #else
      public void send_debug(string name, string component, bool enable, double samplingPercentage)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("debug", TMessageType.Call, seqid_));
        debug_args args = new debug_args();
        args.Name = name;
        args.Component = component;
        args.Enable = enable;
        args.SamplingPercentage = samplingPercentage;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_debug()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        debug_result result = new debug_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setWorkerProfiler(AsyncCallback callback, object state, string id, ProfileRequest profileRequest)
      {
        return send_setWorkerProfiler(callback, state, id, profileRequest);
      }

      public void End_setWorkerProfiler(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_setWorkerProfiler();
      }

      #endif

      public void setWorkerProfiler(string id, ProfileRequest profileRequest)
      {
        #if !SILVERLIGHT
        send_setWorkerProfiler(id, profileRequest);
        recv_setWorkerProfiler();

        #else
        var asyncResult = Begin_setWorkerProfiler(null, null, id, profileRequest);
        End_setWorkerProfiler(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setWorkerProfiler(AsyncCallback callback, object state, string id, ProfileRequest profileRequest)
      #else
      public void send_setWorkerProfiler(string id, ProfileRequest profileRequest)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setWorkerProfiler", TMessageType.Call, seqid_));
        setWorkerProfiler_args args = new setWorkerProfiler_args();
        args.Id = id;
        args.ProfileRequest = profileRequest;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_setWorkerProfiler()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setWorkerProfiler_result result = new setWorkerProfiler_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getComponentPendingProfileActions(AsyncCallback callback, object state, string id, string component_id, ProfileAction action)
      {
        return send_getComponentPendingProfileActions(callback, state, id, component_id, action);
      }

      public List<ProfileRequest> End_getComponentPendingProfileActions(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getComponentPendingProfileActions();
      }

      #endif

      public List<ProfileRequest> getComponentPendingProfileActions(string id, string component_id, ProfileAction action)
      {
        #if !SILVERLIGHT
        send_getComponentPendingProfileActions(id, component_id, action);
        return recv_getComponentPendingProfileActions();

        #else
        var asyncResult = Begin_getComponentPendingProfileActions(null, null, id, component_id, action);
        return End_getComponentPendingProfileActions(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getComponentPendingProfileActions(AsyncCallback callback, object state, string id, string component_id, ProfileAction action)
      #else
      public void send_getComponentPendingProfileActions(string id, string component_id, ProfileAction action)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getComponentPendingProfileActions", TMessageType.Call, seqid_));
        getComponentPendingProfileActions_args args = new getComponentPendingProfileActions_args();
        args.Id = id;
        args.Component_id = component_id;
        args.Action = action;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<ProfileRequest> recv_getComponentPendingProfileActions()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getComponentPendingProfileActions_result result = new getComponentPendingProfileActions_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getComponentPendingProfileActions failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_uploadNewCredentials(AsyncCallback callback, object state, string name, Credentials creds)
      {
        return send_uploadNewCredentials(callback, state, name, creds);
      }

      public void End_uploadNewCredentials(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_uploadNewCredentials();
      }

      #endif

      public void uploadNewCredentials(string name, Credentials creds)
      {
        #if !SILVERLIGHT
        send_uploadNewCredentials(name, creds);
        recv_uploadNewCredentials();

        #else
        var asyncResult = Begin_uploadNewCredentials(null, null, name, creds);
        End_uploadNewCredentials(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_uploadNewCredentials(AsyncCallback callback, object state, string name, Credentials creds)
      #else
      public void send_uploadNewCredentials(string name, Credentials creds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("uploadNewCredentials", TMessageType.Call, seqid_));
        uploadNewCredentials_args args = new uploadNewCredentials_args();
        args.Name = name;
        args.Creds = creds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_uploadNewCredentials()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        uploadNewCredentials_result result = new uploadNewCredentials_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.e) {
          throw result.E;
        }
        if (result.__isset.ite) {
          throw result.Ite;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_beginCreateBlob(AsyncCallback callback, object state, string key, SettableBlobMeta meta)
      {
        return send_beginCreateBlob(callback, state, key, meta);
      }

      public string End_beginCreateBlob(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_beginCreateBlob();
      }

      #endif

      public string beginCreateBlob(string key, SettableBlobMeta meta)
      {
        #if !SILVERLIGHT
        send_beginCreateBlob(key, meta);
        return recv_beginCreateBlob();

        #else
        var asyncResult = Begin_beginCreateBlob(null, null, key, meta);
        return End_beginCreateBlob(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_beginCreateBlob(AsyncCallback callback, object state, string key, SettableBlobMeta meta)
      #else
      public void send_beginCreateBlob(string key, SettableBlobMeta meta)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("beginCreateBlob", TMessageType.Call, seqid_));
        beginCreateBlob_args args = new beginCreateBlob_args();
        args.Key = key;
        args.Meta = meta;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_beginCreateBlob()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        beginCreateBlob_result result = new beginCreateBlob_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        if (result.__isset.kae) {
          throw result.Kae;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "beginCreateBlob failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_beginUpdateBlob(AsyncCallback callback, object state, string key)
      {
        return send_beginUpdateBlob(callback, state, key);
      }

      public string End_beginUpdateBlob(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_beginUpdateBlob();
      }

      #endif

      public string beginUpdateBlob(string key)
      {
        #if !SILVERLIGHT
        send_beginUpdateBlob(key);
        return recv_beginUpdateBlob();

        #else
        var asyncResult = Begin_beginUpdateBlob(null, null, key);
        return End_beginUpdateBlob(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_beginUpdateBlob(AsyncCallback callback, object state, string key)
      #else
      public void send_beginUpdateBlob(string key)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("beginUpdateBlob", TMessageType.Call, seqid_));
        beginUpdateBlob_args args = new beginUpdateBlob_args();
        args.Key = key;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_beginUpdateBlob()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        beginUpdateBlob_result result = new beginUpdateBlob_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        if (result.__isset.knf) {
          throw result.Knf;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "beginUpdateBlob failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_uploadBlobChunk(AsyncCallback callback, object state, string session, byte[] chunk)
      {
        return send_uploadBlobChunk(callback, state, session, chunk);
      }

      public void End_uploadBlobChunk(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_uploadBlobChunk();
      }

      #endif

      public void uploadBlobChunk(string session, byte[] chunk)
      {
        #if !SILVERLIGHT
        send_uploadBlobChunk(session, chunk);
        recv_uploadBlobChunk();

        #else
        var asyncResult = Begin_uploadBlobChunk(null, null, session, chunk);
        End_uploadBlobChunk(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_uploadBlobChunk(AsyncCallback callback, object state, string session, byte[] chunk)
      #else
      public void send_uploadBlobChunk(string session, byte[] chunk)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("uploadBlobChunk", TMessageType.Call, seqid_));
        uploadBlobChunk_args args = new uploadBlobChunk_args();
        args.Session = session;
        args.Chunk = chunk;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_uploadBlobChunk()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        uploadBlobChunk_result result = new uploadBlobChunk_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.aze) {
          throw result.Aze;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_finishBlobUpload(AsyncCallback callback, object state, string session)
      {
        return send_finishBlobUpload(callback, state, session);
      }

      public void End_finishBlobUpload(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_finishBlobUpload();
      }

      #endif

      public void finishBlobUpload(string session)
      {
        #if !SILVERLIGHT
        send_finishBlobUpload(session);
        recv_finishBlobUpload();

        #else
        var asyncResult = Begin_finishBlobUpload(null, null, session);
        End_finishBlobUpload(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_finishBlobUpload(AsyncCallback callback, object state, string session)
      #else
      public void send_finishBlobUpload(string session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("finishBlobUpload", TMessageType.Call, seqid_));
        finishBlobUpload_args args = new finishBlobUpload_args();
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_finishBlobUpload()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        finishBlobUpload_result result = new finishBlobUpload_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.aze) {
          throw result.Aze;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_cancelBlobUpload(AsyncCallback callback, object state, string session)
      {
        return send_cancelBlobUpload(callback, state, session);
      }

      public void End_cancelBlobUpload(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_cancelBlobUpload();
      }

      #endif

      public void cancelBlobUpload(string session)
      {
        #if !SILVERLIGHT
        send_cancelBlobUpload(session);
        recv_cancelBlobUpload();

        #else
        var asyncResult = Begin_cancelBlobUpload(null, null, session);
        End_cancelBlobUpload(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_cancelBlobUpload(AsyncCallback callback, object state, string session)
      #else
      public void send_cancelBlobUpload(string session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("cancelBlobUpload", TMessageType.Call, seqid_));
        cancelBlobUpload_args args = new cancelBlobUpload_args();
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_cancelBlobUpload()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        cancelBlobUpload_result result = new cancelBlobUpload_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.aze) {
          throw result.Aze;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getBlobMeta(AsyncCallback callback, object state, string key)
      {
        return send_getBlobMeta(callback, state, key);
      }

      public ReadableBlobMeta End_getBlobMeta(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getBlobMeta();
      }

      #endif

      public ReadableBlobMeta getBlobMeta(string key)
      {
        #if !SILVERLIGHT
        send_getBlobMeta(key);
        return recv_getBlobMeta();

        #else
        var asyncResult = Begin_getBlobMeta(null, null, key);
        return End_getBlobMeta(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getBlobMeta(AsyncCallback callback, object state, string key)
      #else
      public void send_getBlobMeta(string key)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getBlobMeta", TMessageType.Call, seqid_));
        getBlobMeta_args args = new getBlobMeta_args();
        args.Key = key;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ReadableBlobMeta recv_getBlobMeta()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getBlobMeta_result result = new getBlobMeta_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        if (result.__isset.knf) {
          throw result.Knf;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBlobMeta failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setBlobMeta(AsyncCallback callback, object state, string key, SettableBlobMeta meta)
      {
        return send_setBlobMeta(callback, state, key, meta);
      }

      public void End_setBlobMeta(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_setBlobMeta();
      }

      #endif

      public void setBlobMeta(string key, SettableBlobMeta meta)
      {
        #if !SILVERLIGHT
        send_setBlobMeta(key, meta);
        recv_setBlobMeta();

        #else
        var asyncResult = Begin_setBlobMeta(null, null, key, meta);
        End_setBlobMeta(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setBlobMeta(AsyncCallback callback, object state, string key, SettableBlobMeta meta)
      #else
      public void send_setBlobMeta(string key, SettableBlobMeta meta)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setBlobMeta", TMessageType.Call, seqid_));
        setBlobMeta_args args = new setBlobMeta_args();
        args.Key = key;
        args.Meta = meta;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_setBlobMeta()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setBlobMeta_result result = new setBlobMeta_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.aze) {
          throw result.Aze;
        }
        if (result.__isset.knf) {
          throw result.Knf;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_beginBlobDownload(AsyncCallback callback, object state, string key)
      {
        return send_beginBlobDownload(callback, state, key);
      }

      public BeginDownloadResult End_beginBlobDownload(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_beginBlobDownload();
      }

      #endif

      public BeginDownloadResult beginBlobDownload(string key)
      {
        #if !SILVERLIGHT
        send_beginBlobDownload(key);
        return recv_beginBlobDownload();

        #else
        var asyncResult = Begin_beginBlobDownload(null, null, key);
        return End_beginBlobDownload(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_beginBlobDownload(AsyncCallback callback, object state, string key)
      #else
      public void send_beginBlobDownload(string key)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("beginBlobDownload", TMessageType.Call, seqid_));
        beginBlobDownload_args args = new beginBlobDownload_args();
        args.Key = key;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public BeginDownloadResult recv_beginBlobDownload()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        beginBlobDownload_result result = new beginBlobDownload_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        if (result.__isset.knf) {
          throw result.Knf;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "beginBlobDownload failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_downloadBlobChunk(AsyncCallback callback, object state, string session)
      {
        return send_downloadBlobChunk(callback, state, session);
      }

      public byte[] End_downloadBlobChunk(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_downloadBlobChunk();
      }

      #endif

      public byte[] downloadBlobChunk(string session)
      {
        #if !SILVERLIGHT
        send_downloadBlobChunk(session);
        return recv_downloadBlobChunk();

        #else
        var asyncResult = Begin_downloadBlobChunk(null, null, session);
        return End_downloadBlobChunk(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_downloadBlobChunk(AsyncCallback callback, object state, string session)
      #else
      public void send_downloadBlobChunk(string session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("downloadBlobChunk", TMessageType.Call, seqid_));
        downloadBlobChunk_args args = new downloadBlobChunk_args();
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_downloadBlobChunk()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        downloadBlobChunk_result result = new downloadBlobChunk_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "downloadBlobChunk failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deleteBlob(AsyncCallback callback, object state, string key)
      {
        return send_deleteBlob(callback, state, key);
      }

      public void End_deleteBlob(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_deleteBlob();
      }

      #endif

      public void deleteBlob(string key)
      {
        #if !SILVERLIGHT
        send_deleteBlob(key);
        recv_deleteBlob();

        #else
        var asyncResult = Begin_deleteBlob(null, null, key);
        End_deleteBlob(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deleteBlob(AsyncCallback callback, object state, string key)
      #else
      public void send_deleteBlob(string key)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deleteBlob", TMessageType.Call, seqid_));
        deleteBlob_args args = new deleteBlob_args();
        args.Key = key;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_deleteBlob()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteBlob_result result = new deleteBlob_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.aze) {
          throw result.Aze;
        }
        if (result.__isset.knf) {
          throw result.Knf;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_listBlobs(AsyncCallback callback, object state, string session)
      {
        return send_listBlobs(callback, state, session);
      }

      public ListBlobsResult End_listBlobs(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_listBlobs();
      }

      #endif

      public ListBlobsResult listBlobs(string session)
      {
        #if !SILVERLIGHT
        send_listBlobs(session);
        return recv_listBlobs();

        #else
        var asyncResult = Begin_listBlobs(null, null, session);
        return End_listBlobs(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_listBlobs(AsyncCallback callback, object state, string session)
      #else
      public void send_listBlobs(string session)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("listBlobs", TMessageType.Call, seqid_));
        listBlobs_args args = new listBlobs_args();
        args.Session = session;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ListBlobsResult recv_listBlobs()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        listBlobs_result result = new listBlobs_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "listBlobs failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getBlobReplication(AsyncCallback callback, object state, string key)
      {
        return send_getBlobReplication(callback, state, key);
      }

      public int End_getBlobReplication(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getBlobReplication();
      }

      #endif

      public int getBlobReplication(string key)
      {
        #if !SILVERLIGHT
        send_getBlobReplication(key);
        return recv_getBlobReplication();

        #else
        var asyncResult = Begin_getBlobReplication(null, null, key);
        return End_getBlobReplication(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getBlobReplication(AsyncCallback callback, object state, string key)
      #else
      public void send_getBlobReplication(string key)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getBlobReplication", TMessageType.Call, seqid_));
        getBlobReplication_args args = new getBlobReplication_args();
        args.Key = key;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_getBlobReplication()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getBlobReplication_result result = new getBlobReplication_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        if (result.__isset.knf) {
          throw result.Knf;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBlobReplication failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateBlobReplication(AsyncCallback callback, object state, string key, int replication)
      {
        return send_updateBlobReplication(callback, state, key, replication);
      }

      public int End_updateBlobReplication(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_updateBlobReplication();
      }

      #endif

      public int updateBlobReplication(string key, int replication)
      {
        #if !SILVERLIGHT
        send_updateBlobReplication(key, replication);
        return recv_updateBlobReplication();

        #else
        var asyncResult = Begin_updateBlobReplication(null, null, key, replication);
        return End_updateBlobReplication(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateBlobReplication(AsyncCallback callback, object state, string key, int replication)
      #else
      public void send_updateBlobReplication(string key, int replication)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateBlobReplication", TMessageType.Call, seqid_));
        updateBlobReplication_args args = new updateBlobReplication_args();
        args.Key = key;
        args.Replication = replication;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_updateBlobReplication()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateBlobReplication_result result = new updateBlobReplication_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        if (result.__isset.knf) {
          throw result.Knf;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateBlobReplication failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_createStateInZookeeper(AsyncCallback callback, object state, string key)
      {
        return send_createStateInZookeeper(callback, state, key);
      }

      public void End_createStateInZookeeper(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_createStateInZookeeper();
      }

      #endif

      public void createStateInZookeeper(string key)
      {
        #if !SILVERLIGHT
        send_createStateInZookeeper(key);
        recv_createStateInZookeeper();

        #else
        var asyncResult = Begin_createStateInZookeeper(null, null, key);
        End_createStateInZookeeper(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createStateInZookeeper(AsyncCallback callback, object state, string key)
      #else
      public void send_createStateInZookeeper(string key)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createStateInZookeeper", TMessageType.Call, seqid_));
        createStateInZookeeper_args args = new createStateInZookeeper_args();
        args.Key = key;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_createStateInZookeeper()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createStateInZookeeper_result result = new createStateInZookeeper_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_beginFileUpload(AsyncCallback callback, object state)
      {
        return send_beginFileUpload(callback, state);
      }

      public string End_beginFileUpload(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_beginFileUpload();
      }

      #endif

      public string beginFileUpload()
      {
        #if !SILVERLIGHT
        send_beginFileUpload();
        return recv_beginFileUpload();

        #else
        var asyncResult = Begin_beginFileUpload(null, null);
        return End_beginFileUpload(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_beginFileUpload(AsyncCallback callback, object state)
      #else
      public void send_beginFileUpload()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("beginFileUpload", TMessageType.Call, seqid_));
        beginFileUpload_args args = new beginFileUpload_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_beginFileUpload()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        beginFileUpload_result result = new beginFileUpload_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "beginFileUpload failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_uploadChunk(AsyncCallback callback, object state, string location, byte[] chunk)
      {
        return send_uploadChunk(callback, state, location, chunk);
      }

      public void End_uploadChunk(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_uploadChunk();
      }

      #endif

      public void uploadChunk(string location, byte[] chunk)
      {
        #if !SILVERLIGHT
        send_uploadChunk(location, chunk);
        recv_uploadChunk();

        #else
        var asyncResult = Begin_uploadChunk(null, null, location, chunk);
        End_uploadChunk(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_uploadChunk(AsyncCallback callback, object state, string location, byte[] chunk)
      #else
      public void send_uploadChunk(string location, byte[] chunk)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("uploadChunk", TMessageType.Call, seqid_));
        uploadChunk_args args = new uploadChunk_args();
        args.Location = location;
        args.Chunk = chunk;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_uploadChunk()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        uploadChunk_result result = new uploadChunk_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.aze) {
          throw result.Aze;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_finishFileUpload(AsyncCallback callback, object state, string location)
      {
        return send_finishFileUpload(callback, state, location);
      }

      public void End_finishFileUpload(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_finishFileUpload();
      }

      #endif

      public void finishFileUpload(string location)
      {
        #if !SILVERLIGHT
        send_finishFileUpload(location);
        recv_finishFileUpload();

        #else
        var asyncResult = Begin_finishFileUpload(null, null, location);
        End_finishFileUpload(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_finishFileUpload(AsyncCallback callback, object state, string location)
      #else
      public void send_finishFileUpload(string location)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("finishFileUpload", TMessageType.Call, seqid_));
        finishFileUpload_args args = new finishFileUpload_args();
        args.Location = location;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_finishFileUpload()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        finishFileUpload_result result = new finishFileUpload_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.aze) {
          throw result.Aze;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_beginFileDownload(AsyncCallback callback, object state, string file)
      {
        return send_beginFileDownload(callback, state, file);
      }

      public string End_beginFileDownload(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_beginFileDownload();
      }

      #endif

      public string beginFileDownload(string file)
      {
        #if !SILVERLIGHT
        send_beginFileDownload(file);
        return recv_beginFileDownload();

        #else
        var asyncResult = Begin_beginFileDownload(null, null, file);
        return End_beginFileDownload(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_beginFileDownload(AsyncCallback callback, object state, string file)
      #else
      public void send_beginFileDownload(string file)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("beginFileDownload", TMessageType.Call, seqid_));
        beginFileDownload_args args = new beginFileDownload_args();
        args.File = file;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_beginFileDownload()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        beginFileDownload_result result = new beginFileDownload_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "beginFileDownload failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_downloadChunk(AsyncCallback callback, object state, string id)
      {
        return send_downloadChunk(callback, state, id);
      }

      public byte[] End_downloadChunk(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_downloadChunk();
      }

      #endif

      public byte[] downloadChunk(string id)
      {
        #if !SILVERLIGHT
        send_downloadChunk(id);
        return recv_downloadChunk();

        #else
        var asyncResult = Begin_downloadChunk(null, null, id);
        return End_downloadChunk(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_downloadChunk(AsyncCallback callback, object state, string id)
      #else
      public void send_downloadChunk(string id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("downloadChunk", TMessageType.Call, seqid_));
        downloadChunk_args args = new downloadChunk_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_downloadChunk()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        downloadChunk_result result = new downloadChunk_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "downloadChunk failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getNimbusConf(AsyncCallback callback, object state)
      {
        return send_getNimbusConf(callback, state);
      }

      public string End_getNimbusConf(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getNimbusConf();
      }

      #endif

      public string getNimbusConf()
      {
        #if !SILVERLIGHT
        send_getNimbusConf();
        return recv_getNimbusConf();

        #else
        var asyncResult = Begin_getNimbusConf(null, null);
        return End_getNimbusConf(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getNimbusConf(AsyncCallback callback, object state)
      #else
      public void send_getNimbusConf()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getNimbusConf", TMessageType.Call, seqid_));
        getNimbusConf_args args = new getNimbusConf_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_getNimbusConf()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getNimbusConf_result result = new getNimbusConf_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNimbusConf failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getClusterInfo(AsyncCallback callback, object state)
      {
        return send_getClusterInfo(callback, state);
      }

      public ClusterSummary End_getClusterInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getClusterInfo();
      }

      #endif

      public ClusterSummary getClusterInfo()
      {
        #if !SILVERLIGHT
        send_getClusterInfo();
        return recv_getClusterInfo();

        #else
        var asyncResult = Begin_getClusterInfo(null, null);
        return End_getClusterInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getClusterInfo(AsyncCallback callback, object state)
      #else
      public void send_getClusterInfo()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getClusterInfo", TMessageType.Call, seqid_));
        getClusterInfo_args args = new getClusterInfo_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ClusterSummary recv_getClusterInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getClusterInfo_result result = new getClusterInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getClusterInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getTopologyInfo(AsyncCallback callback, object state, string id)
      {
        return send_getTopologyInfo(callback, state, id);
      }

      public TopologyInfo End_getTopologyInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getTopologyInfo();
      }

      #endif

      public TopologyInfo getTopologyInfo(string id)
      {
        #if !SILVERLIGHT
        send_getTopologyInfo(id);
        return recv_getTopologyInfo();

        #else
        var asyncResult = Begin_getTopologyInfo(null, null, id);
        return End_getTopologyInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getTopologyInfo(AsyncCallback callback, object state, string id)
      #else
      public void send_getTopologyInfo(string id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getTopologyInfo", TMessageType.Call, seqid_));
        getTopologyInfo_args args = new getTopologyInfo_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TopologyInfo recv_getTopologyInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTopologyInfo_result result = new getTopologyInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTopologyInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getTopologyInfoWithOpts(AsyncCallback callback, object state, string id, GetInfoOptions options)
      {
        return send_getTopologyInfoWithOpts(callback, state, id, options);
      }

      public TopologyInfo End_getTopologyInfoWithOpts(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getTopologyInfoWithOpts();
      }

      #endif

      public TopologyInfo getTopologyInfoWithOpts(string id, GetInfoOptions options)
      {
        #if !SILVERLIGHT
        send_getTopologyInfoWithOpts(id, options);
        return recv_getTopologyInfoWithOpts();

        #else
        var asyncResult = Begin_getTopologyInfoWithOpts(null, null, id, options);
        return End_getTopologyInfoWithOpts(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getTopologyInfoWithOpts(AsyncCallback callback, object state, string id, GetInfoOptions options)
      #else
      public void send_getTopologyInfoWithOpts(string id, GetInfoOptions options)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getTopologyInfoWithOpts", TMessageType.Call, seqid_));
        getTopologyInfoWithOpts_args args = new getTopologyInfoWithOpts_args();
        args.Id = id;
        args.Options = options;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TopologyInfo recv_getTopologyInfoWithOpts()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTopologyInfoWithOpts_result result = new getTopologyInfoWithOpts_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTopologyInfoWithOpts failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getTopologyPageInfo(AsyncCallback callback, object state, string id, string window, bool is_include_sys)
      {
        return send_getTopologyPageInfo(callback, state, id, window, is_include_sys);
      }

      public TopologyPageInfo End_getTopologyPageInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getTopologyPageInfo();
      }

      #endif

      public TopologyPageInfo getTopologyPageInfo(string id, string window, bool is_include_sys)
      {
        #if !SILVERLIGHT
        send_getTopologyPageInfo(id, window, is_include_sys);
        return recv_getTopologyPageInfo();

        #else
        var asyncResult = Begin_getTopologyPageInfo(null, null, id, window, is_include_sys);
        return End_getTopologyPageInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getTopologyPageInfo(AsyncCallback callback, object state, string id, string window, bool is_include_sys)
      #else
      public void send_getTopologyPageInfo(string id, string window, bool is_include_sys)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getTopologyPageInfo", TMessageType.Call, seqid_));
        getTopologyPageInfo_args args = new getTopologyPageInfo_args();
        args.Id = id;
        args.Window = window;
        args.Is_include_sys = is_include_sys;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TopologyPageInfo recv_getTopologyPageInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTopologyPageInfo_result result = new getTopologyPageInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTopologyPageInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getComponentPageInfo(AsyncCallback callback, object state, string topology_id, string component_id, string window, bool is_include_sys)
      {
        return send_getComponentPageInfo(callback, state, topology_id, component_id, window, is_include_sys);
      }

      public ComponentPageInfo End_getComponentPageInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getComponentPageInfo();
      }

      #endif

      public ComponentPageInfo getComponentPageInfo(string topology_id, string component_id, string window, bool is_include_sys)
      {
        #if !SILVERLIGHT
        send_getComponentPageInfo(topology_id, component_id, window, is_include_sys);
        return recv_getComponentPageInfo();

        #else
        var asyncResult = Begin_getComponentPageInfo(null, null, topology_id, component_id, window, is_include_sys);
        return End_getComponentPageInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getComponentPageInfo(AsyncCallback callback, object state, string topology_id, string component_id, string window, bool is_include_sys)
      #else
      public void send_getComponentPageInfo(string topology_id, string component_id, string window, bool is_include_sys)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getComponentPageInfo", TMessageType.Call, seqid_));
        getComponentPageInfo_args args = new getComponentPageInfo_args();
        args.Topology_id = topology_id;
        args.Component_id = component_id;
        args.Window = window;
        args.Is_include_sys = is_include_sys;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ComponentPageInfo recv_getComponentPageInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getComponentPageInfo_result result = new getComponentPageInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getComponentPageInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getTopologyConf(AsyncCallback callback, object state, string id)
      {
        return send_getTopologyConf(callback, state, id);
      }

      public string End_getTopologyConf(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getTopologyConf();
      }

      #endif

      public string getTopologyConf(string id)
      {
        #if !SILVERLIGHT
        send_getTopologyConf(id);
        return recv_getTopologyConf();

        #else
        var asyncResult = Begin_getTopologyConf(null, null, id);
        return End_getTopologyConf(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getTopologyConf(AsyncCallback callback, object state, string id)
      #else
      public void send_getTopologyConf(string id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getTopologyConf", TMessageType.Call, seqid_));
        getTopologyConf_args args = new getTopologyConf_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_getTopologyConf()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTopologyConf_result result = new getTopologyConf_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTopologyConf failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getTopology(AsyncCallback callback, object state, string id)
      {
        return send_getTopology(callback, state, id);
      }

      public StormTopology End_getTopology(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getTopology();
      }

      #endif

      /// <summary>
      /// Returns the compiled topology that contains ackers and metrics consumsers. Compare {@link #getUserTopology(String id)}.
      /// </summary>
      /// <param name="id"></param>
      public StormTopology getTopology(string id)
      {
        #if !SILVERLIGHT
        send_getTopology(id);
        return recv_getTopology();

        #else
        var asyncResult = Begin_getTopology(null, null, id);
        return End_getTopology(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getTopology(AsyncCallback callback, object state, string id)
      #else
      public void send_getTopology(string id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getTopology", TMessageType.Call, seqid_));
        getTopology_args args = new getTopology_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public StormTopology recv_getTopology()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTopology_result result = new getTopology_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTopology failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getUserTopology(AsyncCallback callback, object state, string id)
      {
        return send_getUserTopology(callback, state, id);
      }

      public StormTopology End_getUserTopology(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getUserTopology();
      }

      #endif

      /// <summary>
      /// Returns the user specified topology as submitted originally. Compare {@link #getTopology(String id)}.
      /// </summary>
      /// <param name="id"></param>
      public StormTopology getUserTopology(string id)
      {
        #if !SILVERLIGHT
        send_getUserTopology(id);
        return recv_getUserTopology();

        #else
        var asyncResult = Begin_getUserTopology(null, null, id);
        return End_getUserTopology(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getUserTopology(AsyncCallback callback, object state, string id)
      #else
      public void send_getUserTopology(string id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getUserTopology", TMessageType.Call, seqid_));
        getUserTopology_args args = new getUserTopology_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public StormTopology recv_getUserTopology()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getUserTopology_result result = new getUserTopology_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserTopology failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getTopologyHistory(AsyncCallback callback, object state, string user)
      {
        return send_getTopologyHistory(callback, state, user);
      }

      public TopologyHistoryInfo End_getTopologyHistory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getTopologyHistory();
      }

      #endif

      public TopologyHistoryInfo getTopologyHistory(string user)
      {
        #if !SILVERLIGHT
        send_getTopologyHistory(user);
        return recv_getTopologyHistory();

        #else
        var asyncResult = Begin_getTopologyHistory(null, null, user);
        return End_getTopologyHistory(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getTopologyHistory(AsyncCallback callback, object state, string user)
      #else
      public void send_getTopologyHistory(string user)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getTopologyHistory", TMessageType.Call, seqid_));
        getTopologyHistory_args args = new getTopologyHistory_args();
        args.User = user;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TopologyHistoryInfo recv_getTopologyHistory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTopologyHistory_result result = new getTopologyHistory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.aze) {
          throw result.Aze;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTopologyHistory failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["submitTopology"] = submitTopology_Process;
        processMap_["submitTopologyWithOpts"] = submitTopologyWithOpts_Process;
        processMap_["killTopology"] = killTopology_Process;
        processMap_["killTopologyWithOpts"] = killTopologyWithOpts_Process;
        processMap_["activate"] = activate_Process;
        processMap_["deactivate"] = deactivate_Process;
        processMap_["rebalance"] = rebalance_Process;
        processMap_["setLogConfig"] = setLogConfig_Process;
        processMap_["getLogConfig"] = getLogConfig_Process;
        processMap_["debug"] = debug_Process;
        processMap_["setWorkerProfiler"] = setWorkerProfiler_Process;
        processMap_["getComponentPendingProfileActions"] = getComponentPendingProfileActions_Process;
        processMap_["uploadNewCredentials"] = uploadNewCredentials_Process;
        processMap_["beginCreateBlob"] = beginCreateBlob_Process;
        processMap_["beginUpdateBlob"] = beginUpdateBlob_Process;
        processMap_["uploadBlobChunk"] = uploadBlobChunk_Process;
        processMap_["finishBlobUpload"] = finishBlobUpload_Process;
        processMap_["cancelBlobUpload"] = cancelBlobUpload_Process;
        processMap_["getBlobMeta"] = getBlobMeta_Process;
        processMap_["setBlobMeta"] = setBlobMeta_Process;
        processMap_["beginBlobDownload"] = beginBlobDownload_Process;
        processMap_["downloadBlobChunk"] = downloadBlobChunk_Process;
        processMap_["deleteBlob"] = deleteBlob_Process;
        processMap_["listBlobs"] = listBlobs_Process;
        processMap_["getBlobReplication"] = getBlobReplication_Process;
        processMap_["updateBlobReplication"] = updateBlobReplication_Process;
        processMap_["createStateInZookeeper"] = createStateInZookeeper_Process;
        processMap_["beginFileUpload"] = beginFileUpload_Process;
        processMap_["uploadChunk"] = uploadChunk_Process;
        processMap_["finishFileUpload"] = finishFileUpload_Process;
        processMap_["beginFileDownload"] = beginFileDownload_Process;
        processMap_["downloadChunk"] = downloadChunk_Process;
        processMap_["getNimbusConf"] = getNimbusConf_Process;
        processMap_["getClusterInfo"] = getClusterInfo_Process;
        processMap_["getTopologyInfo"] = getTopologyInfo_Process;
        processMap_["getTopologyInfoWithOpts"] = getTopologyInfoWithOpts_Process;
        processMap_["getTopologyPageInfo"] = getTopologyPageInfo_Process;
        processMap_["getComponentPageInfo"] = getComponentPageInfo_Process;
        processMap_["getTopologyConf"] = getTopologyConf_Process;
        processMap_["getTopology"] = getTopology_Process;
        processMap_["getUserTopology"] = getUserTopology_Process;
        processMap_["getTopologyHistory"] = getTopologyHistory_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void submitTopology_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        submitTopology_args args = new submitTopology_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        submitTopology_result result = new submitTopology_result();
        try {
          iface_.submitTopology(args.Name, args.UploadedJarLocation, args.JsonConf, args.Topology);
        } catch (AlreadyAliveException e) {
          result.E = e;
        } catch (InvalidTopologyException ite) {
          result.Ite = ite;
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("submitTopology", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void submitTopologyWithOpts_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        submitTopologyWithOpts_args args = new submitTopologyWithOpts_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        submitTopologyWithOpts_result result = new submitTopologyWithOpts_result();
        try {
          iface_.submitTopologyWithOpts(args.Name, args.UploadedJarLocation, args.JsonConf, args.Topology, args.Options);
        } catch (AlreadyAliveException e) {
          result.E = e;
        } catch (InvalidTopologyException ite) {
          result.Ite = ite;
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("submitTopologyWithOpts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void killTopology_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        killTopology_args args = new killTopology_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        killTopology_result result = new killTopology_result();
        try {
          iface_.killTopology(args.Name);
        } catch (NotAliveException e) {
          result.E = e;
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("killTopology", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void killTopologyWithOpts_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        killTopologyWithOpts_args args = new killTopologyWithOpts_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        killTopologyWithOpts_result result = new killTopologyWithOpts_result();
        try {
          iface_.killTopologyWithOpts(args.Name, args.Options);
        } catch (NotAliveException e) {
          result.E = e;
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("killTopologyWithOpts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void activate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        activate_args args = new activate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        activate_result result = new activate_result();
        try {
          iface_.activate(args.Name);
        } catch (NotAliveException e) {
          result.E = e;
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("activate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deactivate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deactivate_args args = new deactivate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deactivate_result result = new deactivate_result();
        try {
          iface_.deactivate(args.Name);
        } catch (NotAliveException e) {
          result.E = e;
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("deactivate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void rebalance_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        rebalance_args args = new rebalance_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        rebalance_result result = new rebalance_result();
        try {
          iface_.rebalance(args.Name, args.Options);
        } catch (NotAliveException e) {
          result.E = e;
        } catch (InvalidTopologyException ite) {
          result.Ite = ite;
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("rebalance", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setLogConfig_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setLogConfig_args args = new setLogConfig_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setLogConfig_result result = new setLogConfig_result();
        iface_.setLogConfig(args.Name, args.Config);
        oprot.WriteMessageBegin(new TMessage("setLogConfig", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getLogConfig_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getLogConfig_args args = new getLogConfig_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getLogConfig_result result = new getLogConfig_result();
        result.Success = iface_.getLogConfig(args.Name);
        oprot.WriteMessageBegin(new TMessage("getLogConfig", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void debug_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        debug_args args = new debug_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        debug_result result = new debug_result();
        try {
          iface_.debug(args.Name, args.Component, args.Enable, args.SamplingPercentage);
        } catch (NotAliveException e) {
          result.E = e;
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("debug", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setWorkerProfiler_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setWorkerProfiler_args args = new setWorkerProfiler_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setWorkerProfiler_result result = new setWorkerProfiler_result();
        iface_.setWorkerProfiler(args.Id, args.ProfileRequest);
        oprot.WriteMessageBegin(new TMessage("setWorkerProfiler", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getComponentPendingProfileActions_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getComponentPendingProfileActions_args args = new getComponentPendingProfileActions_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getComponentPendingProfileActions_result result = new getComponentPendingProfileActions_result();
        result.Success = iface_.getComponentPendingProfileActions(args.Id, args.Component_id, args.Action);
        oprot.WriteMessageBegin(new TMessage("getComponentPendingProfileActions", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void uploadNewCredentials_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        uploadNewCredentials_args args = new uploadNewCredentials_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        uploadNewCredentials_result result = new uploadNewCredentials_result();
        try {
          iface_.uploadNewCredentials(args.Name, args.Creds);
        } catch (NotAliveException e) {
          result.E = e;
        } catch (InvalidTopologyException ite) {
          result.Ite = ite;
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("uploadNewCredentials", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void beginCreateBlob_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        beginCreateBlob_args args = new beginCreateBlob_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        beginCreateBlob_result result = new beginCreateBlob_result();
        try {
          result.Success = iface_.beginCreateBlob(args.Key, args.Meta);
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        } catch (KeyAlreadyExistsException kae) {
          result.Kae = kae;
        }
        oprot.WriteMessageBegin(new TMessage("beginCreateBlob", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void beginUpdateBlob_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        beginUpdateBlob_args args = new beginUpdateBlob_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        beginUpdateBlob_result result = new beginUpdateBlob_result();
        try {
          result.Success = iface_.beginUpdateBlob(args.Key);
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        } catch (KeyNotFoundException knf) {
          result.Knf = knf;
        }
        oprot.WriteMessageBegin(new TMessage("beginUpdateBlob", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void uploadBlobChunk_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        uploadBlobChunk_args args = new uploadBlobChunk_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        uploadBlobChunk_result result = new uploadBlobChunk_result();
        try {
          iface_.uploadBlobChunk(args.Session, args.Chunk);
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("uploadBlobChunk", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void finishBlobUpload_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        finishBlobUpload_args args = new finishBlobUpload_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        finishBlobUpload_result result = new finishBlobUpload_result();
        try {
          iface_.finishBlobUpload(args.Session);
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("finishBlobUpload", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void cancelBlobUpload_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        cancelBlobUpload_args args = new cancelBlobUpload_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        cancelBlobUpload_result result = new cancelBlobUpload_result();
        try {
          iface_.cancelBlobUpload(args.Session);
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("cancelBlobUpload", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getBlobMeta_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getBlobMeta_args args = new getBlobMeta_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getBlobMeta_result result = new getBlobMeta_result();
        try {
          result.Success = iface_.getBlobMeta(args.Key);
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        } catch (KeyNotFoundException knf) {
          result.Knf = knf;
        }
        oprot.WriteMessageBegin(new TMessage("getBlobMeta", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setBlobMeta_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setBlobMeta_args args = new setBlobMeta_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setBlobMeta_result result = new setBlobMeta_result();
        try {
          iface_.setBlobMeta(args.Key, args.Meta);
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        } catch (KeyNotFoundException knf) {
          result.Knf = knf;
        }
        oprot.WriteMessageBegin(new TMessage("setBlobMeta", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void beginBlobDownload_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        beginBlobDownload_args args = new beginBlobDownload_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        beginBlobDownload_result result = new beginBlobDownload_result();
        try {
          result.Success = iface_.beginBlobDownload(args.Key);
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        } catch (KeyNotFoundException knf) {
          result.Knf = knf;
        }
        oprot.WriteMessageBegin(new TMessage("beginBlobDownload", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void downloadBlobChunk_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        downloadBlobChunk_args args = new downloadBlobChunk_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        downloadBlobChunk_result result = new downloadBlobChunk_result();
        try {
          result.Success = iface_.downloadBlobChunk(args.Session);
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("downloadBlobChunk", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteBlob_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteBlob_args args = new deleteBlob_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteBlob_result result = new deleteBlob_result();
        try {
          iface_.deleteBlob(args.Key);
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        } catch (KeyNotFoundException knf) {
          result.Knf = knf;
        }
        oprot.WriteMessageBegin(new TMessage("deleteBlob", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void listBlobs_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        listBlobs_args args = new listBlobs_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        listBlobs_result result = new listBlobs_result();
        result.Success = iface_.listBlobs(args.Session);
        oprot.WriteMessageBegin(new TMessage("listBlobs", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getBlobReplication_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getBlobReplication_args args = new getBlobReplication_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getBlobReplication_result result = new getBlobReplication_result();
        try {
          result.Success = iface_.getBlobReplication(args.Key);
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        } catch (KeyNotFoundException knf) {
          result.Knf = knf;
        }
        oprot.WriteMessageBegin(new TMessage("getBlobReplication", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateBlobReplication_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateBlobReplication_args args = new updateBlobReplication_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateBlobReplication_result result = new updateBlobReplication_result();
        try {
          result.Success = iface_.updateBlobReplication(args.Key, args.Replication);
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        } catch (KeyNotFoundException knf) {
          result.Knf = knf;
        }
        oprot.WriteMessageBegin(new TMessage("updateBlobReplication", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createStateInZookeeper_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createStateInZookeeper_args args = new createStateInZookeeper_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createStateInZookeeper_result result = new createStateInZookeeper_result();
        iface_.createStateInZookeeper(args.Key);
        oprot.WriteMessageBegin(new TMessage("createStateInZookeeper", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void beginFileUpload_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        beginFileUpload_args args = new beginFileUpload_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        beginFileUpload_result result = new beginFileUpload_result();
        try {
          result.Success = iface_.beginFileUpload();
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("beginFileUpload", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void uploadChunk_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        uploadChunk_args args = new uploadChunk_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        uploadChunk_result result = new uploadChunk_result();
        try {
          iface_.uploadChunk(args.Location, args.Chunk);
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("uploadChunk", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void finishFileUpload_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        finishFileUpload_args args = new finishFileUpload_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        finishFileUpload_result result = new finishFileUpload_result();
        try {
          iface_.finishFileUpload(args.Location);
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("finishFileUpload", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void beginFileDownload_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        beginFileDownload_args args = new beginFileDownload_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        beginFileDownload_result result = new beginFileDownload_result();
        try {
          result.Success = iface_.beginFileDownload(args.File);
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("beginFileDownload", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void downloadChunk_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        downloadChunk_args args = new downloadChunk_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        downloadChunk_result result = new downloadChunk_result();
        try {
          result.Success = iface_.downloadChunk(args.Id);
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("downloadChunk", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getNimbusConf_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getNimbusConf_args args = new getNimbusConf_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getNimbusConf_result result = new getNimbusConf_result();
        try {
          result.Success = iface_.getNimbusConf();
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("getNimbusConf", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getClusterInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getClusterInfo_args args = new getClusterInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getClusterInfo_result result = new getClusterInfo_result();
        try {
          result.Success = iface_.getClusterInfo();
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("getClusterInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTopologyInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTopologyInfo_args args = new getTopologyInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTopologyInfo_result result = new getTopologyInfo_result();
        try {
          result.Success = iface_.getTopologyInfo(args.Id);
        } catch (NotAliveException e) {
          result.E = e;
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("getTopologyInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTopologyInfoWithOpts_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTopologyInfoWithOpts_args args = new getTopologyInfoWithOpts_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTopologyInfoWithOpts_result result = new getTopologyInfoWithOpts_result();
        try {
          result.Success = iface_.getTopologyInfoWithOpts(args.Id, args.Options);
        } catch (NotAliveException e) {
          result.E = e;
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("getTopologyInfoWithOpts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTopologyPageInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTopologyPageInfo_args args = new getTopologyPageInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTopologyPageInfo_result result = new getTopologyPageInfo_result();
        try {
          result.Success = iface_.getTopologyPageInfo(args.Id, args.Window, args.Is_include_sys);
        } catch (NotAliveException e) {
          result.E = e;
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("getTopologyPageInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getComponentPageInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getComponentPageInfo_args args = new getComponentPageInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getComponentPageInfo_result result = new getComponentPageInfo_result();
        try {
          result.Success = iface_.getComponentPageInfo(args.Topology_id, args.Component_id, args.Window, args.Is_include_sys);
        } catch (NotAliveException e) {
          result.E = e;
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("getComponentPageInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTopologyConf_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTopologyConf_args args = new getTopologyConf_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTopologyConf_result result = new getTopologyConf_result();
        try {
          result.Success = iface_.getTopologyConf(args.Id);
        } catch (NotAliveException e) {
          result.E = e;
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("getTopologyConf", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTopology_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTopology_args args = new getTopology_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTopology_result result = new getTopology_result();
        try {
          result.Success = iface_.getTopology(args.Id);
        } catch (NotAliveException e) {
          result.E = e;
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("getTopology", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getUserTopology_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getUserTopology_args args = new getUserTopology_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getUserTopology_result result = new getUserTopology_result();
        try {
          result.Success = iface_.getUserTopology(args.Id);
        } catch (NotAliveException e) {
          result.E = e;
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("getUserTopology", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTopologyHistory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTopologyHistory_args args = new getTopologyHistory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTopologyHistory_result result = new getTopologyHistory_result();
        try {
          result.Success = iface_.getTopologyHistory(args.User);
        } catch (AuthorizationException aze) {
          result.Aze = aze;
        }
        oprot.WriteMessageBegin(new TMessage("getTopologyHistory", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class submitTopology_args : TBase
    {
      private string _name;
      private string _uploadedJarLocation;
      private string _jsonConf;
      private StormTopology _topology;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public string UploadedJarLocation
      {
        get
        {
          return _uploadedJarLocation;
        }
        set
        {
          __isset.uploadedJarLocation = true;
          this._uploadedJarLocation = value;
        }
      }

      public string JsonConf
      {
        get
        {
          return _jsonConf;
        }
        set
        {
          __isset.jsonConf = true;
          this._jsonConf = value;
        }
      }

      public StormTopology Topology
      {
        get
        {
          return _topology;
        }
        set
        {
          __isset.topology = true;
          this._topology = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
        public bool uploadedJarLocation;
        public bool jsonConf;
        public bool topology;
      }

      public submitTopology_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UploadedJarLocation = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                JsonConf = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Topology = new StormTopology();
                Topology.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("submitTopology_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (UploadedJarLocation != null && __isset.uploadedJarLocation) {
          field.Name = "uploadedJarLocation";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UploadedJarLocation);
          oprot.WriteFieldEnd();
        }
        if (JsonConf != null && __isset.jsonConf) {
          field.Name = "jsonConf";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(JsonConf);
          oprot.WriteFieldEnd();
        }
        if (Topology != null && __isset.topology) {
          field.Name = "topology";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Topology.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("submitTopology_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(",UploadedJarLocation: ");
        sb.Append(UploadedJarLocation);
        sb.Append(",JsonConf: ");
        sb.Append(JsonConf);
        sb.Append(",Topology: ");
        sb.Append(Topology== null ? "<null>" : Topology.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class submitTopology_result : TBase
    {
      private AlreadyAliveException _e;
      private InvalidTopologyException _ite;
      private AuthorizationException _aze;

      public AlreadyAliveException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }

      public InvalidTopologyException Ite
      {
        get
        {
          return _ite;
        }
        set
        {
          __isset.ite = true;
          this._ite = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
        public bool ite;
        public bool aze;
      }

      public submitTopology_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new AlreadyAliveException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ite = new InvalidTopologyException();
                Ite.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("submitTopology_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ite) {
          if (Ite != null) {
            field.Name = "Ite";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Ite.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("submitTopology_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(",Ite: ");
        sb.Append(Ite== null ? "<null>" : Ite.ToString());
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class submitTopologyWithOpts_args : TBase
    {
      private string _name;
      private string _uploadedJarLocation;
      private string _jsonConf;
      private StormTopology _topology;
      private SubmitOptions _options;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public string UploadedJarLocation
      {
        get
        {
          return _uploadedJarLocation;
        }
        set
        {
          __isset.uploadedJarLocation = true;
          this._uploadedJarLocation = value;
        }
      }

      public string JsonConf
      {
        get
        {
          return _jsonConf;
        }
        set
        {
          __isset.jsonConf = true;
          this._jsonConf = value;
        }
      }

      public StormTopology Topology
      {
        get
        {
          return _topology;
        }
        set
        {
          __isset.topology = true;
          this._topology = value;
        }
      }

      public SubmitOptions Options
      {
        get
        {
          return _options;
        }
        set
        {
          __isset.options = true;
          this._options = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
        public bool uploadedJarLocation;
        public bool jsonConf;
        public bool topology;
        public bool options;
      }

      public submitTopologyWithOpts_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UploadedJarLocation = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                JsonConf = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Topology = new StormTopology();
                Topology.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                Options = new SubmitOptions();
                Options.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("submitTopologyWithOpts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (UploadedJarLocation != null && __isset.uploadedJarLocation) {
          field.Name = "uploadedJarLocation";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UploadedJarLocation);
          oprot.WriteFieldEnd();
        }
        if (JsonConf != null && __isset.jsonConf) {
          field.Name = "jsonConf";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(JsonConf);
          oprot.WriteFieldEnd();
        }
        if (Topology != null && __isset.topology) {
          field.Name = "topology";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Topology.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Options != null && __isset.options) {
          field.Name = "options";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          Options.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("submitTopologyWithOpts_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(",UploadedJarLocation: ");
        sb.Append(UploadedJarLocation);
        sb.Append(",JsonConf: ");
        sb.Append(JsonConf);
        sb.Append(",Topology: ");
        sb.Append(Topology== null ? "<null>" : Topology.ToString());
        sb.Append(",Options: ");
        sb.Append(Options== null ? "<null>" : Options.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class submitTopologyWithOpts_result : TBase
    {
      private AlreadyAliveException _e;
      private InvalidTopologyException _ite;
      private AuthorizationException _aze;

      public AlreadyAliveException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }

      public InvalidTopologyException Ite
      {
        get
        {
          return _ite;
        }
        set
        {
          __isset.ite = true;
          this._ite = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
        public bool ite;
        public bool aze;
      }

      public submitTopologyWithOpts_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new AlreadyAliveException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ite = new InvalidTopologyException();
                Ite.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("submitTopologyWithOpts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ite) {
          if (Ite != null) {
            field.Name = "Ite";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Ite.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("submitTopologyWithOpts_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(",Ite: ");
        sb.Append(Ite== null ? "<null>" : Ite.ToString());
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class killTopology_args : TBase
    {
      private string _name;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
      }

      public killTopology_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("killTopology_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("killTopology_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class killTopology_result : TBase
    {
      private NotAliveException _e;
      private AuthorizationException _aze;

      public NotAliveException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
        public bool aze;
      }

      public killTopology_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new NotAliveException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("killTopology_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("killTopology_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class killTopologyWithOpts_args : TBase
    {
      private string _name;
      private KillOptions _options;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public KillOptions Options
      {
        get
        {
          return _options;
        }
        set
        {
          __isset.options = true;
          this._options = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
        public bool options;
      }

      public killTopologyWithOpts_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Options = new KillOptions();
                Options.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("killTopologyWithOpts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Options != null && __isset.options) {
          field.Name = "options";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Options.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("killTopologyWithOpts_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(",Options: ");
        sb.Append(Options== null ? "<null>" : Options.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class killTopologyWithOpts_result : TBase
    {
      private NotAliveException _e;
      private AuthorizationException _aze;

      public NotAliveException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
        public bool aze;
      }

      public killTopologyWithOpts_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new NotAliveException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("killTopologyWithOpts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("killTopologyWithOpts_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class activate_args : TBase
    {
      private string _name;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
      }

      public activate_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("activate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("activate_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class activate_result : TBase
    {
      private NotAliveException _e;
      private AuthorizationException _aze;

      public NotAliveException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
        public bool aze;
      }

      public activate_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new NotAliveException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("activate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("activate_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deactivate_args : TBase
    {
      private string _name;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
      }

      public deactivate_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deactivate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deactivate_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deactivate_result : TBase
    {
      private NotAliveException _e;
      private AuthorizationException _aze;

      public NotAliveException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
        public bool aze;
      }

      public deactivate_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new NotAliveException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deactivate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deactivate_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class rebalance_args : TBase
    {
      private string _name;
      private RebalanceOptions _options;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public RebalanceOptions Options
      {
        get
        {
          return _options;
        }
        set
        {
          __isset.options = true;
          this._options = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
        public bool options;
      }

      public rebalance_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Options = new RebalanceOptions();
                Options.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("rebalance_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Options != null && __isset.options) {
          field.Name = "options";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Options.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("rebalance_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(",Options: ");
        sb.Append(Options== null ? "<null>" : Options.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class rebalance_result : TBase
    {
      private NotAliveException _e;
      private InvalidTopologyException _ite;
      private AuthorizationException _aze;

      public NotAliveException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }

      public InvalidTopologyException Ite
      {
        get
        {
          return _ite;
        }
        set
        {
          __isset.ite = true;
          this._ite = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
        public bool ite;
        public bool aze;
      }

      public rebalance_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new NotAliveException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ite = new InvalidTopologyException();
                Ite.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("rebalance_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ite) {
          if (Ite != null) {
            field.Name = "Ite";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Ite.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("rebalance_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(",Ite: ");
        sb.Append(Ite== null ? "<null>" : Ite.ToString());
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setLogConfig_args : TBase
    {
      private string _name;
      private LogConfig _config;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public LogConfig Config
      {
        get
        {
          return _config;
        }
        set
        {
          __isset.config = true;
          this._config = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
        public bool config;
      }

      public setLogConfig_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Config = new LogConfig();
                Config.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setLogConfig_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Config != null && __isset.config) {
          field.Name = "config";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Config.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setLogConfig_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(",Config: ");
        sb.Append(Config== null ? "<null>" : Config.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setLogConfig_result : TBase
    {

      public setLogConfig_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setLogConfig_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setLogConfig_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getLogConfig_args : TBase
    {
      private string _name;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
      }

      public getLogConfig_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getLogConfig_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getLogConfig_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getLogConfig_result : TBase
    {
      private LogConfig _success;

      public LogConfig Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getLogConfig_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new LogConfig();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getLogConfig_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getLogConfig_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class debug_args : TBase
    {
      private string _name;
      private string _component;
      private bool _enable;
      private double _samplingPercentage;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public string Component
      {
        get
        {
          return _component;
        }
        set
        {
          __isset.component = true;
          this._component = value;
        }
      }

      public bool Enable
      {
        get
        {
          return _enable;
        }
        set
        {
          __isset.enable = true;
          this._enable = value;
        }
      }

      public double SamplingPercentage
      {
        get
        {
          return _samplingPercentage;
        }
        set
        {
          __isset.samplingPercentage = true;
          this._samplingPercentage = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
        public bool component;
        public bool enable;
        public bool samplingPercentage;
      }

      public debug_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Component = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Enable = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                SamplingPercentage = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("debug_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Component != null && __isset.component) {
          field.Name = "component";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Component);
          oprot.WriteFieldEnd();
        }
        if (__isset.enable) {
          field.Name = "enable";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Enable);
          oprot.WriteFieldEnd();
        }
        if (__isset.samplingPercentage) {
          field.Name = "samplingPercentage";
          field.Type = TType.Double;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(SamplingPercentage);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("debug_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(",Component: ");
        sb.Append(Component);
        sb.Append(",Enable: ");
        sb.Append(Enable);
        sb.Append(",SamplingPercentage: ");
        sb.Append(SamplingPercentage);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class debug_result : TBase
    {
      private NotAliveException _e;
      private AuthorizationException _aze;

      public NotAliveException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
        public bool aze;
      }

      public debug_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new NotAliveException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("debug_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("debug_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setWorkerProfiler_args : TBase
    {
      private string _id;
      private ProfileRequest _profileRequest;

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }

      public ProfileRequest ProfileRequest
      {
        get
        {
          return _profileRequest;
        }
        set
        {
          __isset.profileRequest = true;
          this._profileRequest = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
        public bool profileRequest;
      }

      public setWorkerProfiler_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                ProfileRequest = new ProfileRequest();
                ProfileRequest.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setWorkerProfiler_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (ProfileRequest != null && __isset.profileRequest) {
          field.Name = "profileRequest";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          ProfileRequest.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setWorkerProfiler_args(");
        sb.Append("Id: ");
        sb.Append(Id);
        sb.Append(",ProfileRequest: ");
        sb.Append(ProfileRequest== null ? "<null>" : ProfileRequest.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setWorkerProfiler_result : TBase
    {

      public setWorkerProfiler_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setWorkerProfiler_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setWorkerProfiler_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getComponentPendingProfileActions_args : TBase
    {
      private string _id;
      private string _component_id;
      private ProfileAction _action;

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }

      public string Component_id
      {
        get
        {
          return _component_id;
        }
        set
        {
          __isset.component_id = true;
          this._component_id = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="ProfileAction"/>
      /// </summary>
      public ProfileAction Action
      {
        get
        {
          return _action;
        }
        set
        {
          __isset.action = true;
          this._action = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
        public bool component_id;
        public bool action;
      }

      public getComponentPendingProfileActions_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Component_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Action = (ProfileAction)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getComponentPendingProfileActions_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (Component_id != null && __isset.component_id) {
          field.Name = "component_id";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Component_id);
          oprot.WriteFieldEnd();
        }
        if (__isset.action) {
          field.Name = "action";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Action);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getComponentPendingProfileActions_args(");
        sb.Append("Id: ");
        sb.Append(Id);
        sb.Append(",Component_id: ");
        sb.Append(Component_id);
        sb.Append(",Action: ");
        sb.Append(Action);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getComponentPendingProfileActions_result : TBase
    {
      private List<ProfileRequest> _success;

      public List<ProfileRequest> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getComponentPendingProfileActions_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ProfileRequest>();
                  TList _list369 = iprot.ReadListBegin();
                  for( int _i370 = 0; _i370 < _list369.Count; ++_i370)
                  {
                    ProfileRequest _elem371 = new ProfileRequest();
                    _elem371 = new ProfileRequest();
                    _elem371.Read(iprot);
                    Success.Add(_elem371);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getComponentPendingProfileActions_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ProfileRequest _iter372 in Success)
              {
                _iter372.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getComponentPendingProfileActions_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class uploadNewCredentials_args : TBase
    {
      private string _name;
      private Credentials _creds;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public Credentials Creds
      {
        get
        {
          return _creds;
        }
        set
        {
          __isset.creds = true;
          this._creds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
        public bool creds;
      }

      public uploadNewCredentials_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Creds = new Credentials();
                Creds.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("uploadNewCredentials_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Creds != null && __isset.creds) {
          field.Name = "creds";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Creds.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("uploadNewCredentials_args(");
        sb.Append("Name: ");
        sb.Append(Name);
        sb.Append(",Creds: ");
        sb.Append(Creds== null ? "<null>" : Creds.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class uploadNewCredentials_result : TBase
    {
      private NotAliveException _e;
      private InvalidTopologyException _ite;
      private AuthorizationException _aze;

      public NotAliveException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }

      public InvalidTopologyException Ite
      {
        get
        {
          return _ite;
        }
        set
        {
          __isset.ite = true;
          this._ite = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool e;
        public bool ite;
        public bool aze;
      }

      public uploadNewCredentials_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new NotAliveException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ite = new InvalidTopologyException();
                Ite.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("uploadNewCredentials_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ite) {
          if (Ite != null) {
            field.Name = "Ite";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Ite.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("uploadNewCredentials_result(");
        sb.Append("E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(",Ite: ");
        sb.Append(Ite== null ? "<null>" : Ite.ToString());
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class beginCreateBlob_args : TBase
    {
      private string _key;
      private SettableBlobMeta _meta;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public SettableBlobMeta Meta
      {
        get
        {
          return _meta;
        }
        set
        {
          __isset.meta = true;
          this._meta = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
        public bool meta;
      }

      public beginCreateBlob_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Meta = new SettableBlobMeta();
                Meta.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("beginCreateBlob_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (Meta != null && __isset.meta) {
          field.Name = "meta";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Meta.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("beginCreateBlob_args(");
        sb.Append("Key: ");
        sb.Append(Key);
        sb.Append(",Meta: ");
        sb.Append(Meta== null ? "<null>" : Meta.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class beginCreateBlob_result : TBase
    {
      private string _success;
      private AuthorizationException _aze;
      private KeyAlreadyExistsException _kae;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }

      public KeyAlreadyExistsException Kae
      {
        get
        {
          return _kae;
        }
        set
        {
          __isset.kae = true;
          this._kae = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool aze;
        public bool kae;
      }

      public beginCreateBlob_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Kae = new KeyAlreadyExistsException();
                Kae.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("beginCreateBlob_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.kae) {
          if (Kae != null) {
            field.Name = "Kae";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Kae.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("beginCreateBlob_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(",Kae: ");
        sb.Append(Kae== null ? "<null>" : Kae.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class beginUpdateBlob_args : TBase
    {
      private string _key;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
      }

      public beginUpdateBlob_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("beginUpdateBlob_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("beginUpdateBlob_args(");
        sb.Append("Key: ");
        sb.Append(Key);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class beginUpdateBlob_result : TBase
    {
      private string _success;
      private AuthorizationException _aze;
      private KeyNotFoundException _knf;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }

      public KeyNotFoundException Knf
      {
        get
        {
          return _knf;
        }
        set
        {
          __isset.knf = true;
          this._knf = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool aze;
        public bool knf;
      }

      public beginUpdateBlob_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Knf = new KeyNotFoundException();
                Knf.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("beginUpdateBlob_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.knf) {
          if (Knf != null) {
            field.Name = "Knf";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Knf.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("beginUpdateBlob_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(",Knf: ");
        sb.Append(Knf== null ? "<null>" : Knf.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class uploadBlobChunk_args : TBase
    {
      private string _session;
      private byte[] _chunk;

      public string Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }

      public byte[] Chunk
      {
        get
        {
          return _chunk;
        }
        set
        {
          __isset.chunk = true;
          this._chunk = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool session;
        public bool chunk;
      }

      public uploadBlobChunk_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Session = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Chunk = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("uploadBlobChunk_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Session);
          oprot.WriteFieldEnd();
        }
        if (Chunk != null && __isset.chunk) {
          field.Name = "chunk";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Chunk);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("uploadBlobChunk_args(");
        sb.Append("Session: ");
        sb.Append(Session);
        sb.Append(",Chunk: ");
        sb.Append(Chunk);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class uploadBlobChunk_result : TBase
    {
      private AuthorizationException _aze;

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool aze;
      }

      public uploadBlobChunk_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("uploadBlobChunk_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("uploadBlobChunk_result(");
        sb.Append("Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class finishBlobUpload_args : TBase
    {
      private string _session;

      public string Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool session;
      }

      public finishBlobUpload_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Session = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("finishBlobUpload_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Session);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("finishBlobUpload_args(");
        sb.Append("Session: ");
        sb.Append(Session);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class finishBlobUpload_result : TBase
    {
      private AuthorizationException _aze;

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool aze;
      }

      public finishBlobUpload_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("finishBlobUpload_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("finishBlobUpload_result(");
        sb.Append("Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cancelBlobUpload_args : TBase
    {
      private string _session;

      public string Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool session;
      }

      public cancelBlobUpload_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Session = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("cancelBlobUpload_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Session);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("cancelBlobUpload_args(");
        sb.Append("Session: ");
        sb.Append(Session);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cancelBlobUpload_result : TBase
    {
      private AuthorizationException _aze;

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool aze;
      }

      public cancelBlobUpload_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("cancelBlobUpload_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("cancelBlobUpload_result(");
        sb.Append("Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBlobMeta_args : TBase
    {
      private string _key;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
      }

      public getBlobMeta_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getBlobMeta_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getBlobMeta_args(");
        sb.Append("Key: ");
        sb.Append(Key);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBlobMeta_result : TBase
    {
      private ReadableBlobMeta _success;
      private AuthorizationException _aze;
      private KeyNotFoundException _knf;

      public ReadableBlobMeta Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }

      public KeyNotFoundException Knf
      {
        get
        {
          return _knf;
        }
        set
        {
          __isset.knf = true;
          this._knf = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool aze;
        public bool knf;
      }

      public getBlobMeta_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ReadableBlobMeta();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Knf = new KeyNotFoundException();
                Knf.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getBlobMeta_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.knf) {
          if (Knf != null) {
            field.Name = "Knf";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Knf.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getBlobMeta_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(",Knf: ");
        sb.Append(Knf== null ? "<null>" : Knf.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setBlobMeta_args : TBase
    {
      private string _key;
      private SettableBlobMeta _meta;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public SettableBlobMeta Meta
      {
        get
        {
          return _meta;
        }
        set
        {
          __isset.meta = true;
          this._meta = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
        public bool meta;
      }

      public setBlobMeta_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Meta = new SettableBlobMeta();
                Meta.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setBlobMeta_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (Meta != null && __isset.meta) {
          field.Name = "meta";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Meta.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setBlobMeta_args(");
        sb.Append("Key: ");
        sb.Append(Key);
        sb.Append(",Meta: ");
        sb.Append(Meta== null ? "<null>" : Meta.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setBlobMeta_result : TBase
    {
      private AuthorizationException _aze;
      private KeyNotFoundException _knf;

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }

      public KeyNotFoundException Knf
      {
        get
        {
          return _knf;
        }
        set
        {
          __isset.knf = true;
          this._knf = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool aze;
        public bool knf;
      }

      public setBlobMeta_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Knf = new KeyNotFoundException();
                Knf.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setBlobMeta_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.knf) {
          if (Knf != null) {
            field.Name = "Knf";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Knf.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setBlobMeta_result(");
        sb.Append("Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(",Knf: ");
        sb.Append(Knf== null ? "<null>" : Knf.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class beginBlobDownload_args : TBase
    {
      private string _key;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
      }

      public beginBlobDownload_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("beginBlobDownload_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("beginBlobDownload_args(");
        sb.Append("Key: ");
        sb.Append(Key);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class beginBlobDownload_result : TBase
    {
      private BeginDownloadResult _success;
      private AuthorizationException _aze;
      private KeyNotFoundException _knf;

      public BeginDownloadResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }

      public KeyNotFoundException Knf
      {
        get
        {
          return _knf;
        }
        set
        {
          __isset.knf = true;
          this._knf = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool aze;
        public bool knf;
      }

      public beginBlobDownload_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new BeginDownloadResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Knf = new KeyNotFoundException();
                Knf.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("beginBlobDownload_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.knf) {
          if (Knf != null) {
            field.Name = "Knf";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Knf.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("beginBlobDownload_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(",Knf: ");
        sb.Append(Knf== null ? "<null>" : Knf.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class downloadBlobChunk_args : TBase
    {
      private string _session;

      public string Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool session;
      }

      public downloadBlobChunk_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Session = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("downloadBlobChunk_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Session);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("downloadBlobChunk_args(");
        sb.Append("Session: ");
        sb.Append(Session);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class downloadBlobChunk_result : TBase
    {
      private byte[] _success;
      private AuthorizationException _aze;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool aze;
      }

      public downloadBlobChunk_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("downloadBlobChunk_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("downloadBlobChunk_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteBlob_args : TBase
    {
      private string _key;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
      }

      public deleteBlob_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteBlob_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteBlob_args(");
        sb.Append("Key: ");
        sb.Append(Key);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deleteBlob_result : TBase
    {
      private AuthorizationException _aze;
      private KeyNotFoundException _knf;

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }

      public KeyNotFoundException Knf
      {
        get
        {
          return _knf;
        }
        set
        {
          __isset.knf = true;
          this._knf = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool aze;
        public bool knf;
      }

      public deleteBlob_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Knf = new KeyNotFoundException();
                Knf.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteBlob_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.knf) {
          if (Knf != null) {
            field.Name = "Knf";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Knf.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteBlob_result(");
        sb.Append("Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(",Knf: ");
        sb.Append(Knf== null ? "<null>" : Knf.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listBlobs_args : TBase
    {
      private string _session;

      public string Session
      {
        get
        {
          return _session;
        }
        set
        {
          __isset.session = true;
          this._session = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool session;
      }

      public listBlobs_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Session = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listBlobs_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Session);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listBlobs_args(");
        sb.Append("Session: ");
        sb.Append(Session);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class listBlobs_result : TBase
    {
      private ListBlobsResult _success;

      public ListBlobsResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public listBlobs_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ListBlobsResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("listBlobs_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("listBlobs_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBlobReplication_args : TBase
    {
      private string _key;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
      }

      public getBlobReplication_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getBlobReplication_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getBlobReplication_args(");
        sb.Append("Key: ");
        sb.Append(Key);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getBlobReplication_result : TBase
    {
      private int _success;
      private AuthorizationException _aze;
      private KeyNotFoundException _knf;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }

      public KeyNotFoundException Knf
      {
        get
        {
          return _knf;
        }
        set
        {
          __isset.knf = true;
          this._knf = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool aze;
        public bool knf;
      }

      public getBlobReplication_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Knf = new KeyNotFoundException();
                Knf.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getBlobReplication_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.knf) {
          if (Knf != null) {
            field.Name = "Knf";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Knf.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getBlobReplication_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(",Knf: ");
        sb.Append(Knf== null ? "<null>" : Knf.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateBlobReplication_args : TBase
    {
      private string _key;
      private int _replication;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public int Replication
      {
        get
        {
          return _replication;
        }
        set
        {
          __isset.replication = true;
          this._replication = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
        public bool replication;
      }

      public updateBlobReplication_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Replication = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateBlobReplication_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (__isset.replication) {
          field.Name = "replication";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Replication);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateBlobReplication_args(");
        sb.Append("Key: ");
        sb.Append(Key);
        sb.Append(",Replication: ");
        sb.Append(Replication);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateBlobReplication_result : TBase
    {
      private int _success;
      private AuthorizationException _aze;
      private KeyNotFoundException _knf;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }

      public KeyNotFoundException Knf
      {
        get
        {
          return _knf;
        }
        set
        {
          __isset.knf = true;
          this._knf = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool aze;
        public bool knf;
      }

      public updateBlobReplication_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Knf = new KeyNotFoundException();
                Knf.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateBlobReplication_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.knf) {
          if (Knf != null) {
            field.Name = "Knf";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Knf.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateBlobReplication_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(",Knf: ");
        sb.Append(Knf== null ? "<null>" : Knf.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createStateInZookeeper_args : TBase
    {
      private string _key;

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
      }

      public createStateInZookeeper_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createStateInZookeeper_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createStateInZookeeper_args(");
        sb.Append("Key: ");
        sb.Append(Key);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createStateInZookeeper_result : TBase
    {

      public createStateInZookeeper_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createStateInZookeeper_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createStateInZookeeper_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class beginFileUpload_args : TBase
    {

      public beginFileUpload_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("beginFileUpload_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("beginFileUpload_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class beginFileUpload_result : TBase
    {
      private string _success;
      private AuthorizationException _aze;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool aze;
      }

      public beginFileUpload_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("beginFileUpload_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("beginFileUpload_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class uploadChunk_args : TBase
    {
      private string _location;
      private byte[] _chunk;

      public string Location
      {
        get
        {
          return _location;
        }
        set
        {
          __isset.location = true;
          this._location = value;
        }
      }

      public byte[] Chunk
      {
        get
        {
          return _chunk;
        }
        set
        {
          __isset.chunk = true;
          this._chunk = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool location;
        public bool chunk;
      }

      public uploadChunk_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Location = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Chunk = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("uploadChunk_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Location != null && __isset.location) {
          field.Name = "location";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Location);
          oprot.WriteFieldEnd();
        }
        if (Chunk != null && __isset.chunk) {
          field.Name = "chunk";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Chunk);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("uploadChunk_args(");
        sb.Append("Location: ");
        sb.Append(Location);
        sb.Append(",Chunk: ");
        sb.Append(Chunk);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class uploadChunk_result : TBase
    {
      private AuthorizationException _aze;

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool aze;
      }

      public uploadChunk_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("uploadChunk_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("uploadChunk_result(");
        sb.Append("Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class finishFileUpload_args : TBase
    {
      private string _location;

      public string Location
      {
        get
        {
          return _location;
        }
        set
        {
          __isset.location = true;
          this._location = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool location;
      }

      public finishFileUpload_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Location = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("finishFileUpload_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Location != null && __isset.location) {
          field.Name = "location";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Location);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("finishFileUpload_args(");
        sb.Append("Location: ");
        sb.Append(Location);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class finishFileUpload_result : TBase
    {
      private AuthorizationException _aze;

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool aze;
      }

      public finishFileUpload_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("finishFileUpload_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("finishFileUpload_result(");
        sb.Append("Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class beginFileDownload_args : TBase
    {
      private string _file;

      public string File
      {
        get
        {
          return _file;
        }
        set
        {
          __isset.file = true;
          this._file = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool file;
      }

      public beginFileDownload_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                File = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("beginFileDownload_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (File != null && __isset.file) {
          field.Name = "file";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(File);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("beginFileDownload_args(");
        sb.Append("File: ");
        sb.Append(File);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class beginFileDownload_result : TBase
    {
      private string _success;
      private AuthorizationException _aze;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool aze;
      }

      public beginFileDownload_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("beginFileDownload_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("beginFileDownload_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class downloadChunk_args : TBase
    {
      private string _id;

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
      }

      public downloadChunk_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("downloadChunk_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("downloadChunk_args(");
        sb.Append("Id: ");
        sb.Append(Id);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class downloadChunk_result : TBase
    {
      private byte[] _success;
      private AuthorizationException _aze;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool aze;
      }

      public downloadChunk_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("downloadChunk_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("downloadChunk_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNimbusConf_args : TBase
    {

      public getNimbusConf_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNimbusConf_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNimbusConf_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNimbusConf_result : TBase
    {
      private string _success;
      private AuthorizationException _aze;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool aze;
      }

      public getNimbusConf_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNimbusConf_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNimbusConf_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getClusterInfo_args : TBase
    {

      public getClusterInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getClusterInfo_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getClusterInfo_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getClusterInfo_result : TBase
    {
      private ClusterSummary _success;
      private AuthorizationException _aze;

      public ClusterSummary Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool aze;
      }

      public getClusterInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ClusterSummary();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getClusterInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getClusterInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTopologyInfo_args : TBase
    {
      private string _id;

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
      }

      public getTopologyInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTopologyInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTopologyInfo_args(");
        sb.Append("Id: ");
        sb.Append(Id);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTopologyInfo_result : TBase
    {
      private TopologyInfo _success;
      private NotAliveException _e;
      private AuthorizationException _aze;

      public TopologyInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NotAliveException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
        public bool aze;
      }

      public getTopologyInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TopologyInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new NotAliveException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTopologyInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTopologyInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTopologyInfoWithOpts_args : TBase
    {
      private string _id;
      private GetInfoOptions _options;

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }

      public GetInfoOptions Options
      {
        get
        {
          return _options;
        }
        set
        {
          __isset.options = true;
          this._options = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
        public bool options;
      }

      public getTopologyInfoWithOpts_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Options = new GetInfoOptions();
                Options.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTopologyInfoWithOpts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (Options != null && __isset.options) {
          field.Name = "options";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Options.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTopologyInfoWithOpts_args(");
        sb.Append("Id: ");
        sb.Append(Id);
        sb.Append(",Options: ");
        sb.Append(Options== null ? "<null>" : Options.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTopologyInfoWithOpts_result : TBase
    {
      private TopologyInfo _success;
      private NotAliveException _e;
      private AuthorizationException _aze;

      public TopologyInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NotAliveException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
        public bool aze;
      }

      public getTopologyInfoWithOpts_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TopologyInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new NotAliveException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTopologyInfoWithOpts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTopologyInfoWithOpts_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTopologyPageInfo_args : TBase
    {
      private string _id;
      private string _window;
      private bool _is_include_sys;

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }

      public string Window
      {
        get
        {
          return _window;
        }
        set
        {
          __isset.window = true;
          this._window = value;
        }
      }

      public bool Is_include_sys
      {
        get
        {
          return _is_include_sys;
        }
        set
        {
          __isset.is_include_sys = true;
          this._is_include_sys = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
        public bool window;
        public bool is_include_sys;
      }

      public getTopologyPageInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Window = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Is_include_sys = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTopologyPageInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (Window != null && __isset.window) {
          field.Name = "window";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Window);
          oprot.WriteFieldEnd();
        }
        if (__isset.is_include_sys) {
          field.Name = "is_include_sys";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Is_include_sys);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTopologyPageInfo_args(");
        sb.Append("Id: ");
        sb.Append(Id);
        sb.Append(",Window: ");
        sb.Append(Window);
        sb.Append(",Is_include_sys: ");
        sb.Append(Is_include_sys);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTopologyPageInfo_result : TBase
    {
      private TopologyPageInfo _success;
      private NotAliveException _e;
      private AuthorizationException _aze;

      public TopologyPageInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NotAliveException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
        public bool aze;
      }

      public getTopologyPageInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TopologyPageInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new NotAliveException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTopologyPageInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTopologyPageInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getComponentPageInfo_args : TBase
    {
      private string _topology_id;
      private string _component_id;
      private string _window;
      private bool _is_include_sys;

      public string Topology_id
      {
        get
        {
          return _topology_id;
        }
        set
        {
          __isset.topology_id = true;
          this._topology_id = value;
        }
      }

      public string Component_id
      {
        get
        {
          return _component_id;
        }
        set
        {
          __isset.component_id = true;
          this._component_id = value;
        }
      }

      public string Window
      {
        get
        {
          return _window;
        }
        set
        {
          __isset.window = true;
          this._window = value;
        }
      }

      public bool Is_include_sys
      {
        get
        {
          return _is_include_sys;
        }
        set
        {
          __isset.is_include_sys = true;
          this._is_include_sys = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool topology_id;
        public bool component_id;
        public bool window;
        public bool is_include_sys;
      }

      public getComponentPageInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Topology_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Component_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Window = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                Is_include_sys = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getComponentPageInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Topology_id != null && __isset.topology_id) {
          field.Name = "topology_id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Topology_id);
          oprot.WriteFieldEnd();
        }
        if (Component_id != null && __isset.component_id) {
          field.Name = "component_id";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Component_id);
          oprot.WriteFieldEnd();
        }
        if (Window != null && __isset.window) {
          field.Name = "window";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Window);
          oprot.WriteFieldEnd();
        }
        if (__isset.is_include_sys) {
          field.Name = "is_include_sys";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Is_include_sys);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getComponentPageInfo_args(");
        sb.Append("Topology_id: ");
        sb.Append(Topology_id);
        sb.Append(",Component_id: ");
        sb.Append(Component_id);
        sb.Append(",Window: ");
        sb.Append(Window);
        sb.Append(",Is_include_sys: ");
        sb.Append(Is_include_sys);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getComponentPageInfo_result : TBase
    {
      private ComponentPageInfo _success;
      private NotAliveException _e;
      private AuthorizationException _aze;

      public ComponentPageInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NotAliveException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
        public bool aze;
      }

      public getComponentPageInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ComponentPageInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new NotAliveException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getComponentPageInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getComponentPageInfo_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTopologyConf_args : TBase
    {
      private string _id;

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
      }

      public getTopologyConf_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTopologyConf_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTopologyConf_args(");
        sb.Append("Id: ");
        sb.Append(Id);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTopologyConf_result : TBase
    {
      private string _success;
      private NotAliveException _e;
      private AuthorizationException _aze;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NotAliveException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
        public bool aze;
      }

      public getTopologyConf_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new NotAliveException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTopologyConf_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTopologyConf_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTopology_args : TBase
    {
      private string _id;

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
      }

      public getTopology_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTopology_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTopology_args(");
        sb.Append("Id: ");
        sb.Append(Id);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTopology_result : TBase
    {
      private StormTopology _success;
      private NotAliveException _e;
      private AuthorizationException _aze;

      public StormTopology Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NotAliveException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
        public bool aze;
      }

      public getTopology_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new StormTopology();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new NotAliveException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTopology_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTopology_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserTopology_args : TBase
    {
      private string _id;

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
      }

      public getUserTopology_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserTopology_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getUserTopology_args(");
        sb.Append("Id: ");
        sb.Append(Id);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getUserTopology_result : TBase
    {
      private StormTopology _success;
      private NotAliveException _e;
      private AuthorizationException _aze;

      public StormTopology Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NotAliveException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
        public bool aze;
      }

      public getUserTopology_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new StormTopology();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new NotAliveException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getUserTopology_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getUserTopology_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",E: ");
        sb.Append(E== null ? "<null>" : E.ToString());
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTopologyHistory_args : TBase
    {
      private string _user;

      public string User
      {
        get
        {
          return _user;
        }
        set
        {
          __isset.user = true;
          this._user = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool user;
      }

      public getTopologyHistory_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                User = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTopologyHistory_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (User != null && __isset.user) {
          field.Name = "user";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(User);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTopologyHistory_args(");
        sb.Append("User: ");
        sb.Append(User);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTopologyHistory_result : TBase
    {
      private TopologyHistoryInfo _success;
      private AuthorizationException _aze;

      public TopologyHistoryInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public AuthorizationException Aze
      {
        get
        {
          return _aze;
        }
        set
        {
          __isset.aze = true;
          this._aze = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool aze;
      }

      public getTopologyHistory_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TopologyHistoryInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Aze = new AuthorizationException();
                Aze.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTopologyHistory_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aze) {
          if (Aze != null) {
            field.Name = "Aze";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aze.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTopologyHistory_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Aze: ");
        sb.Append(Aze== null ? "<null>" : Aze.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
