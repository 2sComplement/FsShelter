/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StormThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NimbusSummary : TBase
  {

    public string Host { get; set; }

    public int Port { get; set; }

    public int Uptime_secs { get; set; }

    public bool IsLeader { get; set; }

    public string Version { get; set; }

    public NimbusSummary() {
    }

    public NimbusSummary(string host, int port, int uptime_secs, bool isLeader, string version) : this() {
      this.Host = host;
      this.Port = port;
      this.Uptime_secs = uptime_secs;
      this.IsLeader = isLeader;
      this.Version = version;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_host = false;
      bool isset_port = false;
      bool isset_uptime_secs = false;
      bool isset_isLeader = false;
      bool isset_version = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Host = iprot.ReadString();
              isset_host = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Port = iprot.ReadI32();
              isset_port = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Uptime_secs = iprot.ReadI32();
              isset_uptime_secs = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              IsLeader = iprot.ReadBool();
              isset_isLeader = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Version = iprot.ReadString();
              isset_version = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_host)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_port)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_uptime_secs)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_isLeader)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_version)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("NimbusSummary");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "host";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Host);
      oprot.WriteFieldEnd();
      field.Name = "port";
      field.Type = TType.I32;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Port);
      oprot.WriteFieldEnd();
      field.Name = "uptime_secs";
      field.Type = TType.I32;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Uptime_secs);
      oprot.WriteFieldEnd();
      field.Name = "isLeader";
      field.Type = TType.Bool;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(IsLeader);
      oprot.WriteFieldEnd();
      field.Name = "version";
      field.Type = TType.String;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Version);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("NimbusSummary(");
      sb.Append("Host: ");
      sb.Append(Host);
      sb.Append(",Port: ");
      sb.Append(Port);
      sb.Append(",Uptime_secs: ");
      sb.Append(Uptime_secs);
      sb.Append(",IsLeader: ");
      sb.Append(IsLeader);
      sb.Append(",Version: ");
      sb.Append(Version);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
