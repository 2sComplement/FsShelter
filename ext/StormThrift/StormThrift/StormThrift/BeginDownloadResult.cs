/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StormThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BeginDownloadResult : TBase
  {
    private long _data_size;

    public long Version { get; set; }

    public string Session { get; set; }

    public long Data_size
    {
      get
      {
        return _data_size;
      }
      set
      {
        __isset.data_size = true;
        this._data_size = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool data_size;
    }

    public BeginDownloadResult() {
    }

    public BeginDownloadResult(long version, string session) : this() {
      this.Version = version;
      this.Session = session;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_version = false;
      bool isset_session = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Version = iprot.ReadI64();
              isset_version = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Session = iprot.ReadString();
              isset_session = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              Data_size = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_version)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_session)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BeginDownloadResult");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "version";
      field.Type = TType.I64;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(Version);
      oprot.WriteFieldEnd();
      field.Name = "session";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Session);
      oprot.WriteFieldEnd();
      if (__isset.data_size) {
        field.Name = "data_size";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Data_size);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BeginDownloadResult(");
      sb.Append("Version: ");
      sb.Append(Version);
      sb.Append(",Session: ");
      sb.Append(Session);
      sb.Append(",Data_size: ");
      sb.Append(Data_size);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
