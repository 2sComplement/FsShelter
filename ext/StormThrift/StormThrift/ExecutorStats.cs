/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StormThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ExecutorStats : TBase
  {

    public Dictionary<string, Dictionary<string, long>> Emitted { get; set; }

    public Dictionary<string, Dictionary<string, long>> Transferred { get; set; }

    public ExecutorSpecificStats Specific { get; set; }

    public double Rate { get; set; }

    public ExecutorStats() {
    }

    public ExecutorStats(Dictionary<string, Dictionary<string, long>> emitted, Dictionary<string, Dictionary<string, long>> transferred, ExecutorSpecificStats specific, double rate) : this() {
      this.Emitted = emitted;
      this.Transferred = transferred;
      this.Specific = specific;
      this.Rate = rate;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_emitted = false;
      bool isset_transferred = false;
      bool isset_specific = false;
      bool isset_rate = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                Emitted = new Dictionary<string, Dictionary<string, long>>();
                TMap _map138 = iprot.ReadMapBegin();
                for( int _i139 = 0; _i139 < _map138.Count; ++_i139)
                {
                  string _key140;
                  Dictionary<string, long> _val141;
                  _key140 = iprot.ReadString();
                  {
                    _val141 = new Dictionary<string, long>();
                    TMap _map142 = iprot.ReadMapBegin();
                    for( int _i143 = 0; _i143 < _map142.Count; ++_i143)
                    {
                      string _key144;
                      long _val145;
                      _key144 = iprot.ReadString();
                      _val145 = iprot.ReadI64();
                      _val141[_key144] = _val145;
                    }
                    iprot.ReadMapEnd();
                  }
                  Emitted[_key140] = _val141;
                }
                iprot.ReadMapEnd();
              }
              isset_emitted = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                Transferred = new Dictionary<string, Dictionary<string, long>>();
                TMap _map146 = iprot.ReadMapBegin();
                for( int _i147 = 0; _i147 < _map146.Count; ++_i147)
                {
                  string _key148;
                  Dictionary<string, long> _val149;
                  _key148 = iprot.ReadString();
                  {
                    _val149 = new Dictionary<string, long>();
                    TMap _map150 = iprot.ReadMapBegin();
                    for( int _i151 = 0; _i151 < _map150.Count; ++_i151)
                    {
                      string _key152;
                      long _val153;
                      _key152 = iprot.ReadString();
                      _val153 = iprot.ReadI64();
                      _val149[_key152] = _val153;
                    }
                    iprot.ReadMapEnd();
                  }
                  Transferred[_key148] = _val149;
                }
                iprot.ReadMapEnd();
              }
              isset_transferred = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Specific = new ExecutorSpecificStats();
              Specific.Read(iprot);
              isset_specific = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              Rate = iprot.ReadDouble();
              isset_rate = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_emitted)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_transferred)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_specific)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_rate)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ExecutorStats");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "emitted";
      field.Type = TType.Map;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.String, TType.Map, Emitted.Count));
        foreach (string _iter154 in Emitted.Keys)
        {
          oprot.WriteString(_iter154);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Emitted[_iter154].Count));
            foreach (string _iter155 in Emitted[_iter154].Keys)
            {
              oprot.WriteString(_iter155);
              oprot.WriteI64(Emitted[_iter154][_iter155]);
            }
            oprot.WriteMapEnd();
          }
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
      field.Name = "transferred";
      field.Type = TType.Map;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.String, TType.Map, Transferred.Count));
        foreach (string _iter156 in Transferred.Keys)
        {
          oprot.WriteString(_iter156);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Transferred[_iter156].Count));
            foreach (string _iter157 in Transferred[_iter156].Keys)
            {
              oprot.WriteString(_iter157);
              oprot.WriteI64(Transferred[_iter156][_iter157]);
            }
            oprot.WriteMapEnd();
          }
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
      field.Name = "specific";
      field.Type = TType.Struct;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      Specific.Write(oprot);
      oprot.WriteFieldEnd();
      field.Name = "rate";
      field.Type = TType.Double;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteDouble(Rate);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ExecutorStats(");
      sb.Append("Emitted: ");
      sb.Append(Emitted);
      sb.Append(",Transferred: ");
      sb.Append(Transferred);
      sb.Append(",Specific: ");
      sb.Append(Specific== null ? "<null>" : Specific.ToString());
      sb.Append(",Rate: ");
      sb.Append(Rate);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
