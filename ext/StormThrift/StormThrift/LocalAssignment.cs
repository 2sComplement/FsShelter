/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StormThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class LocalAssignment : TBase
  {
    private WorkerResources _resources;

    public string Topology_id { get; set; }

    public List<ExecutorInfo> Executors { get; set; }

    public WorkerResources Resources
    {
      get
      {
        return _resources;
      }
      set
      {
        __isset.resources = true;
        this._resources = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool resources;
    }

    public LocalAssignment() {
    }

    public LocalAssignment(string topology_id, List<ExecutorInfo> executors) : this() {
      this.Topology_id = topology_id;
      this.Executors = executors;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_topology_id = false;
      bool isset_executors = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Topology_id = iprot.ReadString();
              isset_topology_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Executors = new List<ExecutorInfo>();
                TList _list322 = iprot.ReadListBegin();
                for( int _i323 = 0; _i323 < _list322.Count; ++_i323)
                {
                  ExecutorInfo _elem324 = new ExecutorInfo();
                  _elem324 = new ExecutorInfo();
                  _elem324.Read(iprot);
                  Executors.Add(_elem324);
                }
                iprot.ReadListEnd();
              }
              isset_executors = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Resources = new WorkerResources();
              Resources.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_topology_id)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_executors)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("LocalAssignment");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "topology_id";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Topology_id);
      oprot.WriteFieldEnd();
      field.Name = "executors";
      field.Type = TType.List;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, Executors.Count));
        foreach (ExecutorInfo _iter325 in Executors)
        {
          _iter325.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (Resources != null && __isset.resources) {
        field.Name = "resources";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Resources.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("LocalAssignment(");
      sb.Append("Topology_id: ");
      sb.Append(Topology_id);
      sb.Append(",Executors: ");
      sb.Append(Executors);
      sb.Append(",Resources: ");
      sb.Append(Resources== null ? "<null>" : Resources.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
