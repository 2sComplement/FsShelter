/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StormThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class LSTopoHistory : TBase
  {

    public string Topology_id { get; set; }

    public long Time_stamp { get; set; }

    public List<string> Users { get; set; }

    public List<string> Groups { get; set; }

    public LSTopoHistory() {
    }

    public LSTopoHistory(string topology_id, long time_stamp, List<string> users, List<string> groups) : this() {
      this.Topology_id = topology_id;
      this.Time_stamp = time_stamp;
      this.Users = users;
      this.Groups = groups;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_topology_id = false;
      bool isset_time_stamp = false;
      bool isset_users = false;
      bool isset_groups = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Topology_id = iprot.ReadString();
              isset_topology_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              Time_stamp = iprot.ReadI64();
              isset_time_stamp = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Users = new List<string>();
                TList _list340 = iprot.ReadListBegin();
                for( int _i341 = 0; _i341 < _list340.Count; ++_i341)
                {
                  string _elem342 = null;
                  _elem342 = iprot.ReadString();
                  Users.Add(_elem342);
                }
                iprot.ReadListEnd();
              }
              isset_users = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                Groups = new List<string>();
                TList _list343 = iprot.ReadListBegin();
                for( int _i344 = 0; _i344 < _list343.Count; ++_i344)
                {
                  string _elem345 = null;
                  _elem345 = iprot.ReadString();
                  Groups.Add(_elem345);
                }
                iprot.ReadListEnd();
              }
              isset_groups = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_topology_id)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_time_stamp)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_users)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_groups)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("LSTopoHistory");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "topology_id";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Topology_id);
      oprot.WriteFieldEnd();
      field.Name = "time_stamp";
      field.Type = TType.I64;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(Time_stamp);
      oprot.WriteFieldEnd();
      field.Name = "users";
      field.Type = TType.List;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.String, Users.Count));
        foreach (string _iter346 in Users)
        {
          oprot.WriteString(_iter346);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      field.Name = "groups";
      field.Type = TType.List;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.String, Groups.Count));
        foreach (string _iter347 in Groups)
        {
          oprot.WriteString(_iter347);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("LSTopoHistory(");
      sb.Append("Topology_id: ");
      sb.Append(Topology_id);
      sb.Append(",Time_stamp: ");
      sb.Append(Time_stamp);
      sb.Append(",Users: ");
      sb.Append(Users);
      sb.Append(",Groups: ");
      sb.Append(Groups);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
