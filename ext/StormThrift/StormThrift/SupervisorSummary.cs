/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StormThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SupervisorSummary : TBase
  {
    private string _version;
    private Dictionary<string, double> _total_resources;
    private double _used_mem;
    private double _used_cpu;

    public string Host { get; set; }

    public int Uptime_secs { get; set; }

    public int Num_workers { get; set; }

    public int Num_used_workers { get; set; }

    public string Supervisor_id { get; set; }

    public string Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }

    public Dictionary<string, double> Total_resources
    {
      get
      {
        return _total_resources;
      }
      set
      {
        __isset.total_resources = true;
        this._total_resources = value;
      }
    }

    public double Used_mem
    {
      get
      {
        return _used_mem;
      }
      set
      {
        __isset.used_mem = true;
        this._used_mem = value;
      }
    }

    public double Used_cpu
    {
      get
      {
        return _used_cpu;
      }
      set
      {
        __isset.used_cpu = true;
        this._used_cpu = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool version;
      public bool total_resources;
      public bool used_mem;
      public bool used_cpu;
    }

    public SupervisorSummary() {
      this._version = "VERSION_NOT_PROVIDED";
      this.__isset.version = true;
    }

    public SupervisorSummary(string host, int uptime_secs, int num_workers, int num_used_workers, string supervisor_id) : this() {
      this.Host = host;
      this.Uptime_secs = uptime_secs;
      this.Num_workers = num_workers;
      this.Num_used_workers = num_used_workers;
      this.Supervisor_id = supervisor_id;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_host = false;
      bool isset_uptime_secs = false;
      bool isset_num_workers = false;
      bool isset_num_used_workers = false;
      bool isset_supervisor_id = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Host = iprot.ReadString();
              isset_host = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Uptime_secs = iprot.ReadI32();
              isset_uptime_secs = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Num_workers = iprot.ReadI32();
              isset_num_workers = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Num_used_workers = iprot.ReadI32();
              isset_num_used_workers = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Supervisor_id = iprot.ReadString();
              isset_supervisor_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Version = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Map) {
              {
                Total_resources = new Dictionary<string, double>();
                TMap _map41 = iprot.ReadMapBegin();
                for( int _i42 = 0; _i42 < _map41.Count; ++_i42)
                {
                  string _key43;
                  double _val44;
                  _key43 = iprot.ReadString();
                  _val44 = iprot.ReadDouble();
                  Total_resources[_key43] = _val44;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Double) {
              Used_mem = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Double) {
              Used_cpu = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_host)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_uptime_secs)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_num_workers)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_num_used_workers)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_supervisor_id)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SupervisorSummary");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "host";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Host);
      oprot.WriteFieldEnd();
      field.Name = "uptime_secs";
      field.Type = TType.I32;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Uptime_secs);
      oprot.WriteFieldEnd();
      field.Name = "num_workers";
      field.Type = TType.I32;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Num_workers);
      oprot.WriteFieldEnd();
      field.Name = "num_used_workers";
      field.Type = TType.I32;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Num_used_workers);
      oprot.WriteFieldEnd();
      field.Name = "supervisor_id";
      field.Type = TType.String;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Supervisor_id);
      oprot.WriteFieldEnd();
      if (Version != null && __isset.version) {
        field.Name = "version";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Version);
        oprot.WriteFieldEnd();
      }
      if (Total_resources != null && __isset.total_resources) {
        field.Name = "total_resources";
        field.Type = TType.Map;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Double, Total_resources.Count));
          foreach (string _iter45 in Total_resources.Keys)
          {
            oprot.WriteString(_iter45);
            oprot.WriteDouble(Total_resources[_iter45]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.used_mem) {
        field.Name = "used_mem";
        field.Type = TType.Double;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Used_mem);
        oprot.WriteFieldEnd();
      }
      if (__isset.used_cpu) {
        field.Name = "used_cpu";
        field.Type = TType.Double;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Used_cpu);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SupervisorSummary(");
      sb.Append("Host: ");
      sb.Append(Host);
      sb.Append(",Uptime_secs: ");
      sb.Append(Uptime_secs);
      sb.Append(",Num_workers: ");
      sb.Append(Num_workers);
      sb.Append(",Num_used_workers: ");
      sb.Append(Num_used_workers);
      sb.Append(",Supervisor_id: ");
      sb.Append(Supervisor_id);
      sb.Append(",Version: ");
      sb.Append(Version);
      sb.Append(",Total_resources: ");
      sb.Append(Total_resources);
      sb.Append(",Used_mem: ");
      sb.Append(Used_mem);
      sb.Append(",Used_cpu: ");
      sb.Append(Used_cpu);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
