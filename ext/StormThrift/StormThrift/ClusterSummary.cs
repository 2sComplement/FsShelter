/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StormThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ClusterSummary : TBase
  {
    private int _nimbus_uptime_secs;

    public List<SupervisorSummary> Supervisors { get; set; }

    public int Nimbus_uptime_secs
    {
      get
      {
        return _nimbus_uptime_secs;
      }
      set
      {
        __isset.nimbus_uptime_secs = true;
        this._nimbus_uptime_secs = value;
      }
    }

    public List<TopologySummary> Topologies { get; set; }

    public List<NimbusSummary> Nimbuses { get; set; }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool nimbus_uptime_secs;
    }

    public ClusterSummary() {
      this._nimbus_uptime_secs = 0;
      this.__isset.nimbus_uptime_secs = true;
    }

    public ClusterSummary(List<SupervisorSummary> supervisors, List<TopologySummary> topologies, List<NimbusSummary> nimbuses) : this() {
      this.Supervisors = supervisors;
      this.Topologies = topologies;
      this.Nimbuses = nimbuses;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_supervisors = false;
      bool isset_topologies = false;
      bool isset_nimbuses = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Supervisors = new List<SupervisorSummary>();
                TList _list46 = iprot.ReadListBegin();
                for( int _i47 = 0; _i47 < _list46.Count; ++_i47)
                {
                  SupervisorSummary _elem48 = new SupervisorSummary();
                  _elem48 = new SupervisorSummary();
                  _elem48.Read(iprot);
                  Supervisors.Add(_elem48);
                }
                iprot.ReadListEnd();
              }
              isset_supervisors = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Nimbus_uptime_secs = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Topologies = new List<TopologySummary>();
                TList _list49 = iprot.ReadListBegin();
                for( int _i50 = 0; _i50 < _list49.Count; ++_i50)
                {
                  TopologySummary _elem51 = new TopologySummary();
                  _elem51 = new TopologySummary();
                  _elem51.Read(iprot);
                  Topologies.Add(_elem51);
                }
                iprot.ReadListEnd();
              }
              isset_topologies = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                Nimbuses = new List<NimbusSummary>();
                TList _list52 = iprot.ReadListBegin();
                for( int _i53 = 0; _i53 < _list52.Count; ++_i53)
                {
                  NimbusSummary _elem54 = new NimbusSummary();
                  _elem54 = new NimbusSummary();
                  _elem54.Read(iprot);
                  Nimbuses.Add(_elem54);
                }
                iprot.ReadListEnd();
              }
              isset_nimbuses = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_supervisors)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_topologies)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_nimbuses)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ClusterSummary");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "supervisors";
      field.Type = TType.List;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, Supervisors.Count));
        foreach (SupervisorSummary _iter55 in Supervisors)
        {
          _iter55.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (__isset.nimbus_uptime_secs) {
        field.Name = "nimbus_uptime_secs";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Nimbus_uptime_secs);
        oprot.WriteFieldEnd();
      }
      field.Name = "topologies";
      field.Type = TType.List;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, Topologies.Count));
        foreach (TopologySummary _iter56 in Topologies)
        {
          _iter56.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      field.Name = "nimbuses";
      field.Type = TType.List;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, Nimbuses.Count));
        foreach (NimbusSummary _iter57 in Nimbuses)
        {
          _iter57.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ClusterSummary(");
      sb.Append("Supervisors: ");
      sb.Append(Supervisors);
      sb.Append(",Nimbus_uptime_secs: ");
      sb.Append(Nimbus_uptime_secs);
      sb.Append(",Topologies: ");
      sb.Append(Topologies);
      sb.Append(",Nimbuses: ");
      sb.Append(Nimbuses);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
