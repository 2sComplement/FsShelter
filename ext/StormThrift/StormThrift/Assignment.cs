/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StormThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Assignment : TBase
  {
    private Dictionary<string, string> _node_host;
    private Dictionary<List<long>, NodeInfo> _executor_node_port;
    private Dictionary<List<long>, long> _executor_start_time_secs;
    private Dictionary<NodeInfo, WorkerResources> _worker_resources;

    public string Master_code_dir { get; set; }

    public Dictionary<string, string> Node_host
    {
      get
      {
        return _node_host;
      }
      set
      {
        __isset.node_host = true;
        this._node_host = value;
      }
    }

    public Dictionary<List<long>, NodeInfo> Executor_node_port
    {
      get
      {
        return _executor_node_port;
      }
      set
      {
        __isset.executor_node_port = true;
        this._executor_node_port = value;
      }
    }

    public Dictionary<List<long>, long> Executor_start_time_secs
    {
      get
      {
        return _executor_start_time_secs;
      }
      set
      {
        __isset.executor_start_time_secs = true;
        this._executor_start_time_secs = value;
      }
    }

    public Dictionary<NodeInfo, WorkerResources> Worker_resources
    {
      get
      {
        return _worker_resources;
      }
      set
      {
        __isset.worker_resources = true;
        this._worker_resources = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool node_host;
      public bool executor_node_port;
      public bool executor_start_time_secs;
      public bool worker_resources;
    }

    public Assignment() {
      this._node_host = new Dictionary<string, string>();
      this.__isset.node_host = true;
      this._executor_node_port = new Dictionary<List<long>, NodeInfo>();
      this.__isset.executor_node_port = true;
      this._executor_start_time_secs = new Dictionary<List<long>, long>();
      this.__isset.executor_start_time_secs = true;
      this._worker_resources = new Dictionary<NodeInfo, WorkerResources>();
      this.__isset.worker_resources = true;
    }

    public Assignment(string master_code_dir) : this() {
      this.Master_code_dir = master_code_dir;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_master_code_dir = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Master_code_dir = iprot.ReadString();
              isset_master_code_dir = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                Node_host = new Dictionary<string, string>();
                TMap _map274 = iprot.ReadMapBegin();
                for( int _i275 = 0; _i275 < _map274.Count; ++_i275)
                {
                  string _key276;
                  string _val277;
                  _key276 = iprot.ReadString();
                  _val277 = iprot.ReadString();
                  Node_host[_key276] = _val277;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                Executor_node_port = new Dictionary<List<long>, NodeInfo>();
                TMap _map278 = iprot.ReadMapBegin();
                for( int _i279 = 0; _i279 < _map278.Count; ++_i279)
                {
                  List<long> _key280;
                  NodeInfo _val281;
                  {
                    _key280 = new List<long>();
                    TList _list282 = iprot.ReadListBegin();
                    for( int _i283 = 0; _i283 < _list282.Count; ++_i283)
                    {
                      long _elem284 = 0;
                      _elem284 = iprot.ReadI64();
                      _key280.Add(_elem284);
                    }
                    iprot.ReadListEnd();
                  }
                  _val281 = new NodeInfo();
                  _val281.Read(iprot);
                  Executor_node_port[_key280] = _val281;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                Executor_start_time_secs = new Dictionary<List<long>, long>();
                TMap _map285 = iprot.ReadMapBegin();
                for( int _i286 = 0; _i286 < _map285.Count; ++_i286)
                {
                  List<long> _key287;
                  long _val288;
                  {
                    _key287 = new List<long>();
                    TList _list289 = iprot.ReadListBegin();
                    for( int _i290 = 0; _i290 < _list289.Count; ++_i290)
                    {
                      long _elem291 = 0;
                      _elem291 = iprot.ReadI64();
                      _key287.Add(_elem291);
                    }
                    iprot.ReadListEnd();
                  }
                  _val288 = iprot.ReadI64();
                  Executor_start_time_secs[_key287] = _val288;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Map) {
              {
                Worker_resources = new Dictionary<NodeInfo, WorkerResources>();
                TMap _map292 = iprot.ReadMapBegin();
                for( int _i293 = 0; _i293 < _map292.Count; ++_i293)
                {
                  NodeInfo _key294;
                  WorkerResources _val295;
                  _key294 = new NodeInfo();
                  _key294.Read(iprot);
                  _val295 = new WorkerResources();
                  _val295.Read(iprot);
                  Worker_resources[_key294] = _val295;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_master_code_dir)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Assignment");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "master_code_dir";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Master_code_dir);
      oprot.WriteFieldEnd();
      if (Node_host != null && __isset.node_host) {
        field.Name = "node_host";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Node_host.Count));
          foreach (string _iter296 in Node_host.Keys)
          {
            oprot.WriteString(_iter296);
            oprot.WriteString(Node_host[_iter296]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Executor_node_port != null && __isset.executor_node_port) {
        field.Name = "executor_node_port";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.List, TType.Struct, Executor_node_port.Count));
          foreach (List<long> _iter297 in Executor_node_port.Keys)
          {
            {
              oprot.WriteListBegin(new TList(TType.I64, _iter297.Count));
              foreach (long _iter298 in _iter297)
              {
                oprot.WriteI64(_iter298);
              }
              oprot.WriteListEnd();
            }
            Executor_node_port[_iter297].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Executor_start_time_secs != null && __isset.executor_start_time_secs) {
        field.Name = "executor_start_time_secs";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.List, TType.I64, Executor_start_time_secs.Count));
          foreach (List<long> _iter299 in Executor_start_time_secs.Keys)
          {
            {
              oprot.WriteListBegin(new TList(TType.I64, _iter299.Count));
              foreach (long _iter300 in _iter299)
              {
                oprot.WriteI64(_iter300);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteI64(Executor_start_time_secs[_iter299]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Worker_resources != null && __isset.worker_resources) {
        field.Name = "worker_resources";
        field.Type = TType.Map;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, Worker_resources.Count));
          foreach (NodeInfo _iter301 in Worker_resources.Keys)
          {
            _iter301.Write(oprot);
            Worker_resources[_iter301].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Assignment(");
      sb.Append("Master_code_dir: ");
      sb.Append(Master_code_dir);
      sb.Append(",Node_host: ");
      sb.Append(Node_host);
      sb.Append(",Executor_node_port: ");
      sb.Append(Executor_node_port);
      sb.Append(",Executor_start_time_secs: ");
      sb.Append(Executor_start_time_secs);
      sb.Append(",Worker_resources: ");
      sb.Append(Worker_resources);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
