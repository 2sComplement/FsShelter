/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StormThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RebalanceOptions : TBase
  {
    private int _wait_secs;
    private int _num_workers;
    private Dictionary<string, int> _num_executors;

    public int Wait_secs
    {
      get
      {
        return _wait_secs;
      }
      set
      {
        __isset.wait_secs = true;
        this._wait_secs = value;
      }
    }

    public int Num_workers
    {
      get
      {
        return _num_workers;
      }
      set
      {
        __isset.num_workers = true;
        this._num_workers = value;
      }
    }

    public Dictionary<string, int> Num_executors
    {
      get
      {
        return _num_executors;
      }
      set
      {
        __isset.num_executors = true;
        this._num_executors = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool wait_secs;
      public bool num_workers;
      public bool num_executors;
    }

    public RebalanceOptions() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Wait_secs = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Num_workers = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                Num_executors = new Dictionary<string, int>();
                TMap _map234 = iprot.ReadMapBegin();
                for( int _i235 = 0; _i235 < _map234.Count; ++_i235)
                {
                  string _key236;
                  int _val237;
                  _key236 = iprot.ReadString();
                  _val237 = iprot.ReadI32();
                  Num_executors[_key236] = _val237;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RebalanceOptions");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.wait_secs) {
        field.Name = "wait_secs";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Wait_secs);
        oprot.WriteFieldEnd();
      }
      if (__isset.num_workers) {
        field.Name = "num_workers";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Num_workers);
        oprot.WriteFieldEnd();
      }
      if (Num_executors != null && __isset.num_executors) {
        field.Name = "num_executors";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.I32, Num_executors.Count));
          foreach (string _iter238 in Num_executors.Keys)
          {
            oprot.WriteString(_iter238);
            oprot.WriteI32(Num_executors[_iter238]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("RebalanceOptions(");
      sb.Append("Wait_secs: ");
      sb.Append(Wait_secs);
      sb.Append(",Num_workers: ");
      sb.Append(Num_workers);
      sb.Append(",Num_executors: ");
      sb.Append(Num_executors);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
