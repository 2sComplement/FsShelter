/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace StormThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SpoutStats : TBase
  {

    public Dictionary<string, Dictionary<string, long>> Acked { get; set; }

    public Dictionary<string, Dictionary<string, long>> Failed { get; set; }

    public Dictionary<string, Dictionary<string, double>> Complete_ms_avg { get; set; }

    public SpoutStats() {
    }

    public SpoutStats(Dictionary<string, Dictionary<string, long>> acked, Dictionary<string, Dictionary<string, long>> failed, Dictionary<string, Dictionary<string, double>> complete_ms_avg) : this() {
      this.Acked = acked;
      this.Failed = failed;
      this.Complete_ms_avg = complete_ms_avg;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_acked = false;
      bool isset_failed = false;
      bool isset_complete_ms_avg = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                Acked = new Dictionary<string, Dictionary<string, long>>();
                TMap _map108 = iprot.ReadMapBegin();
                for( int _i109 = 0; _i109 < _map108.Count; ++_i109)
                {
                  string _key110;
                  Dictionary<string, long> _val111;
                  _key110 = iprot.ReadString();
                  {
                    _val111 = new Dictionary<string, long>();
                    TMap _map112 = iprot.ReadMapBegin();
                    for( int _i113 = 0; _i113 < _map112.Count; ++_i113)
                    {
                      string _key114;
                      long _val115;
                      _key114 = iprot.ReadString();
                      _val115 = iprot.ReadI64();
                      _val111[_key114] = _val115;
                    }
                    iprot.ReadMapEnd();
                  }
                  Acked[_key110] = _val111;
                }
                iprot.ReadMapEnd();
              }
              isset_acked = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                Failed = new Dictionary<string, Dictionary<string, long>>();
                TMap _map116 = iprot.ReadMapBegin();
                for( int _i117 = 0; _i117 < _map116.Count; ++_i117)
                {
                  string _key118;
                  Dictionary<string, long> _val119;
                  _key118 = iprot.ReadString();
                  {
                    _val119 = new Dictionary<string, long>();
                    TMap _map120 = iprot.ReadMapBegin();
                    for( int _i121 = 0; _i121 < _map120.Count; ++_i121)
                    {
                      string _key122;
                      long _val123;
                      _key122 = iprot.ReadString();
                      _val123 = iprot.ReadI64();
                      _val119[_key122] = _val123;
                    }
                    iprot.ReadMapEnd();
                  }
                  Failed[_key118] = _val119;
                }
                iprot.ReadMapEnd();
              }
              isset_failed = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                Complete_ms_avg = new Dictionary<string, Dictionary<string, double>>();
                TMap _map124 = iprot.ReadMapBegin();
                for( int _i125 = 0; _i125 < _map124.Count; ++_i125)
                {
                  string _key126;
                  Dictionary<string, double> _val127;
                  _key126 = iprot.ReadString();
                  {
                    _val127 = new Dictionary<string, double>();
                    TMap _map128 = iprot.ReadMapBegin();
                    for( int _i129 = 0; _i129 < _map128.Count; ++_i129)
                    {
                      string _key130;
                      double _val131;
                      _key130 = iprot.ReadString();
                      _val131 = iprot.ReadDouble();
                      _val127[_key130] = _val131;
                    }
                    iprot.ReadMapEnd();
                  }
                  Complete_ms_avg[_key126] = _val127;
                }
                iprot.ReadMapEnd();
              }
              isset_complete_ms_avg = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_acked)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_failed)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_complete_ms_avg)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SpoutStats");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "acked";
      field.Type = TType.Map;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.String, TType.Map, Acked.Count));
        foreach (string _iter132 in Acked.Keys)
        {
          oprot.WriteString(_iter132);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Acked[_iter132].Count));
            foreach (string _iter133 in Acked[_iter132].Keys)
            {
              oprot.WriteString(_iter133);
              oprot.WriteI64(Acked[_iter132][_iter133]);
            }
            oprot.WriteMapEnd();
          }
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
      field.Name = "failed";
      field.Type = TType.Map;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.String, TType.Map, Failed.Count));
        foreach (string _iter134 in Failed.Keys)
        {
          oprot.WriteString(_iter134);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Failed[_iter134].Count));
            foreach (string _iter135 in Failed[_iter134].Keys)
            {
              oprot.WriteString(_iter135);
              oprot.WriteI64(Failed[_iter134][_iter135]);
            }
            oprot.WriteMapEnd();
          }
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
      field.Name = "complete_ms_avg";
      field.Type = TType.Map;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.String, TType.Map, Complete_ms_avg.Count));
        foreach (string _iter136 in Complete_ms_avg.Keys)
        {
          oprot.WriteString(_iter136);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.Double, Complete_ms_avg[_iter136].Count));
            foreach (string _iter137 in Complete_ms_avg[_iter136].Keys)
            {
              oprot.WriteString(_iter137);
              oprot.WriteDouble(Complete_ms_avg[_iter136][_iter137]);
            }
            oprot.WriteMapEnd();
          }
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SpoutStats(");
      sb.Append("Acked: ");
      sb.Append(Acked);
      sb.Append(",Failed: ");
      sb.Append(Failed);
      sb.Append(",Complete_ms_avg: ");
      sb.Append(Complete_ms_avg);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
