// --------------------------------------------------------------------------------------
// FAKE build script
// --------------------------------------------------------------------------------------

#r @"packages/build/FAKE/tools/FakeLib.dll"

open Fake
open Fake.Git
open Fake.AssemblyInfoFile
open Fake.ReleaseNotesHelper
open System
open System.IO
#if MONO
#else
#load "packages/build/SourceLink.Fake/tools/Fake.fsx"
open SourceLink
#endif

// The name of the project
// (used by attributes in AssemblyInfo, name of a NuGet package and directory in 'src')
let project = "FsShelter"

// Short summary of the project
// (used as description in AssemblyInfo and as a short summary for NuGet package)
let summary = "F# DSL and runtime for Storm topologies"

// Longer description of the project
// (used as a description for NuGet package; line breaks are automatically cleaned up)
let description = "F# DSL and runtime for Apache Storm topologies"

// List of author names (for NuGet package)
let authors = [ "Eugene Tolmachev" ]

// Tags for your project (for NuGet package)
let tags = "storm event-driven fsharp distributed"

// File system information 
let solutionFile  = "src/FsShelter.sln"

// Pattern specifying assemblies to be tested using NUnit
let testAssemblies = "build/*Test*.dll"

// Git configuration (used for publishing documentation in gh-pages branch)
// The profile where the project is posted
let gitOwner = "Prolucid" 
let gitHome = "https://github.com/" + gitOwner

// The name of the project on GitHub
let gitName = "FsShelter"

// The url for the raw files hosted
let gitRaw = environVarOrDefault "gitRaw" "https://raw.github.com/"+gitOwner+"/"+gitName

// build output folder
let build_out = "build" 

// Read additional information from the release notes document
let release = LoadReleaseNotes "RELEASE_NOTES.md"

let dotnetcliVersion = "2.0.0"

let mutable dotnetExePath = "dotnet"

Target "InstallDotNetCore" (fun _ ->
    dotnetExePath <- DotNetCli.InstallDotNetSDK dotnetcliVersion
)

let runDotnet workingDir args =
    let result =
        ExecProcess (fun info ->
            info.FileName <- dotnetExePath
            info.WorkingDirectory <- workingDir
            info.Arguments <- args) TimeSpan.MaxValue
    if result <> 0 then failwithf "dotnet %s failed" args

// Helper active pattern for project types
let (|Fsproj|Csproj|) (projFileName:string) = 
    match projFileName with
    | f when f.EndsWith("fsproj") -> Fsproj
    | f when f.EndsWith("csproj") -> Csproj
    | _                           -> failwith (sprintf "Project file %s not supported. Unknown project type." projFileName)

// Generate assembly info files with the right version & up-to-date information
// Copies binaries from default VS location to expected bin folder
// But keeps a subdirectory structure for each project in the 
// src folder to support multiple project outputs
Target "CopyBinaries" (fun _ ->
    !! "src/**/*.??proj"
    |>  Seq.map (fun f -> ((System.IO.Path.GetDirectoryName f) @@ "bin/Release"))
    |>  Seq.iter (fun (fromDir) -> CopyDir build_out fromDir (fun _ -> true))
)

Target "Clean" (fun _ ->
    CleanDirs [build_out]
    !! "src/**/*.??proj"
    ++ "ext/**/*.??proj"
    ++ "samples/**/*.??proj"
    |> Seq.iter ((sprintf "clean %s") >> runDotnet ".")
)

Target "CleanDocs" (fun _ ->
    CleanDirs ["docs/output"]
)

Target "Restore" (fun _ ->
    !! "src/**/*.??proj"
    ++ "ext/**/*.??proj"
    ++ "samples/**/*.??proj"
    |> Seq.iter ((sprintf "restore %s") >> runDotnet ".")
)

Target "Build" (fun _ ->
    let assemblyInfo =
        [ "Description",summary
          "Version", release.AssemblyVersion
          "Authors", gitOwner
          "PackageProjectUrl", gitHome
          "RepositoryUrl", gitHome
          "PackageIconUrl", gitRaw + "/master/docs/files/img/logo.png"
          "PackageLicenseUrl", gitRaw + "/master/docs/files/LICENSE.md" ]
    !! solutionFile
    |> MSBuildReleaseExt "" (assemblyInfo @ ["LINT","True"]) "Rebuild"
    |> ignore
)

// --------------------------------------------------------------------------------------
// Run the unit tests using test runner

Target "Tests" (fun _ ->
    !! testAssemblies
    |> NUnit (fun p ->
        { p with
            DisableShadowCopy = true
            ExcludeCategory = "interactive"
            TimeOut = TimeSpan.FromMinutes 20.
            OutputFile = build_out @@ "TestResults.xml" })
)

#if MONO
#else
// --------------------------------------------------------------------------------------
// SourceLink allows Source Indexing on the PDB generated by the compiler, this allows
// the ability to step through the source code of external libraries https://github.com/ctaggart/SourceLink

Target "SourceLink" (fun _ ->
    let baseUrl = sprintf "%s/%s/{0}/%%var2%%" gitRaw project
    !! "src/**/*.??proj"
    |> Seq.iter (fun projFile ->
        let proj = VsProj.LoadRelease projFile 
        SourceLink.Index proj.CompilesNotLinked proj.OutputFilePdb __SOURCE_DIRECTORY__ baseUrl
    )
)

#endif

// --------------------------------------------------------------------------------------
// Build a NuGet package

Target "Package" (fun _ ->
    Paket.Pack(fun p -> 
        { p with
            OutputPath = build_out
            TemplateFile = "paket.template"
            Version = release.NugetVersion
            ReleaseNotes = toLines release.Notes})
)

Target "PublishNuget" (fun _ ->
    Paket.Push(fun p -> 
        { p with
            WorkingDir = build_out })
)


// --------------------------------------------------------------------------------------
// Generate the documentation

Target "GenerateReferenceDocs" (fun _ ->
    if not <| executeFSIWithArgs "docs/tools" "generate.fsx" ["--define:RELEASE"; "--define:REFERENCE"] [] then
      failwith "generating reference documentation failed"
)

let generateHelp' fail debug =
    let args =
        if debug then ["--define:HELP"]
        else ["--define:RELEASE"; "--define:HELP"]
    if executeFSIWithArgs "docs/tools" "generate.fsx" args [] then
        traceImportant "Help generated"
    else
        if fail then
            failwith "generating help documentation failed"
        else
            traceImportant "generating help documentation failed"

let generateHelp fail =
    generateHelp' fail false

Target "GenerateHelp" (fun _ ->
    DeleteFile "docs/content/release-notes.md"
    CopyFile "docs/content/" "RELEASE_NOTES.md"

    DeleteFile "docs/content/license.md"
    CopyFile "docs/content/" "LICENSE.md"

    generateHelp true
)

Target "GenerateHelpDebug" (fun _ ->
    DeleteFile "docs/content/release-notes.md"
    CopyFile "docs/content/" "RELEASE_NOTES.md"
    Rename "docs/content/release-notes.md" "docs/content/RELEASE_NOTES.md"

    DeleteFile "docs/content/license.md"
    CopyFile "docs/content/" "LICENSE.txt"
    Rename "docs/content/license.md" "docs/content/LICENSE.txt"

    generateHelp' true true
)

Target "KeepRunning" (fun _ ->    
    use watcher = new FileSystemWatcher(DirectoryInfo("docs/content").FullName,"*.*")
    watcher.EnableRaisingEvents <- true
    watcher.Changed.Add(fun e -> generateHelp false)
    watcher.Created.Add(fun e -> generateHelp false)
    watcher.Renamed.Add(fun e -> generateHelp false)
    watcher.Deleted.Add(fun e -> generateHelp false)

    traceImportant "Waiting for help edits. Press any key to stop."

    System.Console.ReadKey() |> ignore

    watcher.EnableRaisingEvents <- false
    watcher.Dispose()
)

Target "GenerateDocs" DoNothing

let createIndexFsx lang =
    let content = """(*** hide ***)
#I build_out

(**
FsShelter ({0})
=========================
*)
"""
    let targetDir = "docs/content" @@ lang
    let targetFile = targetDir @@ "index.fsx"
    ensureDirectory targetDir
    System.IO.File.WriteAllText(targetFile, System.String.Format(content, lang))

Target "AddLangDocs" (fun _ ->
    let args = System.Environment.GetCommandLineArgs()
    if args.Length < 4 then
        failwith "Language not specified."

    args.[3..]
    |> Seq.iter (fun lang ->
        if lang.Length <> 2 && lang.Length <> 3 then
            failwithf "Language must be 2 or 3 characters (ex. 'de', 'fr', 'ja', 'gsw', etc.): %s" lang

        let templateFileName = "template.cshtml"
        let templateDir = "docs/tools/templates"
        let langTemplateDir = templateDir @@ lang
        let langTemplateFileName = langTemplateDir @@ templateFileName

        if System.IO.File.Exists(langTemplateFileName) then
            failwithf "Documents for specified language '%s' have already been added." lang

        ensureDirectory langTemplateDir
        Copy langTemplateDir [ templateDir @@ templateFileName ]

        createIndexFsx lang)
)

// --------------------------------------------------------------------------------------
// Release Scripts

Target "ReleaseDocs" (fun _ ->
    let tempDocsDir = "temp/gh-pages"
    CleanDir tempDocsDir
    Repository.cloneSingleBranch "" (gitHome + "/" + gitName + ".git") "gh-pages" tempDocsDir

    CopyRecursive "docs/output" tempDocsDir true |> tracefn "%A"
    StageAll tempDocsDir
    Git.Commit.Commit tempDocsDir (sprintf "Update generated documentation for version %s" release.NugetVersion)
    Branches.push tempDocsDir
)

#load "paket-files/build/fsharp/FAKE/modules/Octokit/Octokit.fsx"
open Octokit

Target "Release" (fun _ ->
    StageAll ""
    Git.Commit.Commit "" (sprintf "Bump version to %s" release.NugetVersion)
    Branches.push ""

    Branches.tag "" release.NugetVersion
    Branches.pushTag "" "origin" release.NugetVersion
    
    // release on github
    createClient (getBuildParamOrDefault "github-user" "") (getBuildParamOrDefault "github-pw" "")
    |> createDraft gitOwner gitName release.NugetVersion (release.SemVer.PreRelease <> None) release.Notes 
    // TODO: |> uploadFile "PATH_TO_FILE"    
    |> releaseDraft
    |> Async.RunSynchronously
)


// --------------------------------------------------------------------------------------
// code-gen tasks
Target "ProtoShell" (fun _ ->
    let generated = "ext" @@ "ProtoShell" @@ "generated" 
    let cli = 
        "packages" @@ "build" @@ "Google.Protobuf.Tools" @@ "tools" 
        @@ if isWindows then "windows_x64" @@ "protoc.exe"
           else if isLinux then "linux_x64" @@ "protoc"
           else "macosx_x64" @@ "protoc"
    CleanDir generated
    Shell.Exec(
            cli,
            "--csharp_out=" + generated 
            + " --proto_path=" + "packages" @@ "build" @@ "Google.Protobuf.Tools" @@ "tools"
            + " --proto_path=" + "paket-files" @@ "prolucid" @@ "protoshell" @@ "src" @@ "main" @@  "proto"
            + " paket-files" @@ "prolucid" @@ "protoshell" @@ "src" @@ "main" @@  "proto" @@ "multilang.proto")
    |> ignore
)

Target "StormThriftNamespace" (fun _ ->
    "paket-files" @@ "et1975" @@ "storm" @@ "storm-core" @@ "src" @@ "storm.thrift"
    |> RegexReplaceInFileWithEncoding "namespace java org.apache.storm.generated" "namespace csharp StormThrift" Text.Encoding.ASCII
)

Target "StormThrift" (fun _ ->
    let generated = "ext" @@ "StormThrift" @@ "StormThrift"
    CleanDir generated
    Shell.Exec(
            "packages" @@ "build" @@ "Thrift" @@ "tools" @@ "thrift-0.9.1.exe",
            "-out " + generated @@ ".."
            + " --gen csharp"
            + " paket-files" @@ "et1975" @@ "storm" @@ "storm-core" @@ "src" @@ "storm.thrift")
    |> ignore
)

Target "GenerateSources" DoNothing

"ProtoShell"
  ==> "GenerateSources"
"StormThriftNamespace"
  ==> "StormThrift"
  ==> "GenerateSources"

// --------------------------------------------------------------------------------------
// graph gen tasks
// GraphViz has to be installed and "dot" be in the path
Target "WordCountSvg" (fun _ ->
    Shell.Exec(
#if MONO
            "mono",
            ""+
#else
            Environment.GetEnvironmentVariable("ComSpec"),
            "/c "+
#endif
            ("samples" @@ "WordCount" @@ "bin" @@ "Release" @@ "WordCount.exe") +
            " graph | dot -Tsvg -o " + build_out + "/WordCount.svg")
    |> ignore
)

Target "GuaranteedSvg" (fun _ ->
    Shell.Exec(
#if MONO
            "mono",
            ""+
#else
            Environment.GetEnvironmentVariable("ComSpec"),
            "/c "+
#endif
            ("samples" @@ "Guaranteed" @@ "bin" @@ "Release" @@ "Guaranteed.exe") +
            " graph | dot -Tsvg -o " + build_out + "/Guaranteed.svg")
    |> ignore
)

Target "ExportGraphs" DoNothing
"ExportGraphs"
    <== ["Build";"WordCountSvg";"GuaranteedSvg"]

// --------------------------------------------------------------------------------------
// Run all targets by default. Invoke 'build <Target>' to override

Target "All" DoNothing

"Clean"
  ==> "Restore"
  ==> "Build"
  ==> "CopyBinaries"
  ==> "Tests"
  ==> "All"

"All" 
#if MONO
#else
  =?> ("SourceLink", Pdbstr.tryFind().IsSome )
#endif
  ==> "Package"
  =?> ("GenerateReferenceDocs",isLocalBuild)
  =?> ("GenerateDocs",isLocalBuild)
  =?> ("ReleaseDocs",isLocalBuild)

"CleanDocs"
  ==> "GenerateHelp"
  ==> "GenerateReferenceDocs"
  ==> "GenerateDocs"

"CleanDocs"
  ==> "GenerateHelpDebug"

"GenerateHelp"
  ==> "KeepRunning"
    
"ReleaseDocs"
  ==> "Release"

"Package"
  ==> "PublishNuget"
  ==> "Release"

RunTargetOrDefault "All"
